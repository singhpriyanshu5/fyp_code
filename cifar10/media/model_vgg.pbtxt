node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "y_"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Conv/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Conv/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
}
node {
  name: "Conv/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv/weights/Initializer/truncated_normal/mul"
  input: "Conv/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
}
node {
  name: "Conv/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv/weights/Assign"
  op: "Assign"
  input: "Conv/weights"
  input: "Conv/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv/weights/read"
  op: "Identity"
  input: "Conv/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
}
node {
  name: "Conv/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
}
node {
  name: "Conv/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
}
node {
  name: "Conv/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv/biases/Assign"
  op: "Assign"
  input: "Conv/biases"
  input: "Conv/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv/biases/read"
  op: "Identity"
  input: "Conv/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/biases"
      }
    }
  }
}
node {
  name: "Conv/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv/Conv2D"
  op: "Conv2D"
  input: "x"
  input: "Conv/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv/BiasAdd"
  op: "BiasAdd"
  input: "Conv/Conv2D"
  input: "Conv/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv/Relu"
  op: "Relu"
  input: "Conv/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm/gamma/Assign"
  op: "Assign"
  input: "BatchNorm/gamma"
  input: "BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm/gamma/read"
  op: "Identity"
  input: "BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm/beta/Assign"
  op: "Assign"
  input: "BatchNorm/beta"
  input: "BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm/beta/read"
  op: "Identity"
  input: "BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/beta"
      }
    }
  }
}
node {
  name: "BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm/moving_mean"
  input: "BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm/moving_mean/read"
  op: "Identity"
  input: "BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm/moving_variance"
  input: "BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm/moving_variance/read"
  op: "Identity"
  input: "BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm/cond/switch_t"
  op: "Identity"
  input: "BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm/cond/switch_f"
  op: "Identity"
  input: "BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm/cond/Const"
  op: "Const"
  input: "^BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm/cond/Const_1"
  op: "Const"
  input: "^BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv/Relu"
  input: "BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm/gamma/read"
  input: "BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm/beta/read"
  input: "BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/beta"
      }
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm/cond/Const"
  input: "BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv/Relu"
  input: "BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm/gamma/read"
  input: "BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm/beta/read"
  input: "BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/beta"
      }
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm/moving_mean/read"
  input: "BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm/moving_variance/read"
  input: "BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm/cond/Merge"
  op: "Merge"
  input: "BatchNorm/cond/FusedBatchNorm_1"
  input: "BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm/cond/FusedBatchNorm_1:1"
  input: "BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm/cond/FusedBatchNorm_1:2"
  input: "BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm/ExpandDims/input"
  input: "BatchNorm/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm/ExpandDims_1/input"
  input: "BatchNorm/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm/Select"
  op: "Select"
  input: "BatchNorm/Reshape"
  input: "BatchNorm/ExpandDims"
  input: "BatchNorm/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm/Squeeze"
  op: "Squeeze"
  input: "BatchNorm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm/AssignMovingAvg/read"
  input: "BatchNorm/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm/AssignMovingAvg/Sub"
  input: "BatchNorm/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm/moving_mean"
  input: "BatchNorm/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm/AssignMovingAvg_1/read"
  input: "BatchNorm/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm/AssignMovingAvg_1/Sub"
  input: "BatchNorm/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm/moving_variance"
  input: "BatchNorm/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Dropout/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30000001192092896
      }
    }
  }
}
node {
  name: "Dropout/dropout/Shape"
  op: "Shape"
  input: "BatchNorm/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout/dropout/random_uniform/max"
  input: "Dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout/dropout/random_uniform/RandomUniform"
  input: "Dropout/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout/dropout/random_uniform"
  op: "Add"
  input: "Dropout/dropout/random_uniform/mul"
  input: "Dropout/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout/dropout/add"
  op: "Add"
  input: "Dropout/dropout/keep_prob"
  input: "Dropout/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout/dropout/Floor"
  op: "Floor"
  input: "Dropout/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout/dropout/div"
  op: "RealDiv"
  input: "BatchNorm/cond/Merge"
  input: "Dropout/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout/dropout/mul"
  op: "Mul"
  input: "Dropout/dropout/div"
  input: "Dropout/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Conv_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
}
node {
  name: "Conv_1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_1/weights/Initializer/truncated_normal/mul"
  input: "Conv_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
}
node {
  name: "Conv_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_1/weights/Assign"
  op: "Assign"
  input: "Conv_1/weights"
  input: "Conv_1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_1/weights/read"
  op: "Identity"
  input: "Conv_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
}
node {
  name: "Conv_1/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_1/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
}
node {
  name: "Conv_1/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_1/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
}
node {
  name: "Conv_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_1/biases/Assign"
  op: "Assign"
  input: "Conv_1/biases"
  input: "Conv_1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_1/biases/read"
  op: "Identity"
  input: "Conv_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/biases"
      }
    }
  }
}
node {
  name: "Conv_1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_1/Conv2D"
  op: "Conv2D"
  input: "x"
  input: "Conv_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_1/BiasAdd"
  op: "BiasAdd"
  input: "Conv_1/Conv2D"
  input: "Conv_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_1/Relu"
  op: "Relu"
  input: "Conv_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_1/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_1/gamma"
  input: "BatchNorm_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_1/gamma/read"
  op: "Identity"
  input: "BatchNorm_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_1/beta/Assign"
  op: "Assign"
  input: "BatchNorm_1/beta"
  input: "BatchNorm_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_1/beta/read"
  op: "Identity"
  input: "BatchNorm_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_1/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_1/moving_mean"
  input: "BatchNorm_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_1/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_1/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_1/moving_variance"
  input: "BatchNorm_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_1/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_1/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_1/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_1/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_1/cond/Const"
  op: "Const"
  input: "^BatchNorm_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_1/Relu"
  input: "BatchNorm_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_1/gamma/read"
  input: "BatchNorm_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_1/beta/read"
  input: "BatchNorm_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_1/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_1/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_1/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_1/cond/Const"
  input: "BatchNorm_1/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_1/Relu"
  input: "BatchNorm_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_1/gamma/read"
  input: "BatchNorm_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_1/beta/read"
  input: "BatchNorm_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_1/moving_mean/read"
  input: "BatchNorm_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_1/moving_variance/read"
  input: "BatchNorm_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_1/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_1/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_1/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_1/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_1/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_1/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_1/cond/Merge"
  op: "Merge"
  input: "BatchNorm_1/cond/FusedBatchNorm_1"
  input: "BatchNorm_1/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_1/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_1/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_1/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_1/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_1/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_1/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_1/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_1/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_1/ExpandDims/input"
  input: "BatchNorm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_1/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_1/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_1/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_1/ExpandDims_1/input"
  input: "BatchNorm_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_1/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_1/Select"
  op: "Select"
  input: "BatchNorm_1/Reshape"
  input: "BatchNorm_1/ExpandDims"
  input: "BatchNorm_1/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_1/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_1/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_1/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_1/AssignMovingAvg/read"
  input: "BatchNorm_1/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_1/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_1/AssignMovingAvg/Sub"
  input: "BatchNorm_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_1/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_1/moving_mean"
  input: "BatchNorm_1/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_1/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_1/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_1/AssignMovingAvg_1/read"
  input: "BatchNorm_1/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_1/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_1/AssignMovingAvg_1/Sub"
  input: "BatchNorm_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_1/moving_variance"
  input: "BatchNorm_1/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "MaxPool2D/MaxPool"
  op: "MaxPool"
  input: "BatchNorm_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "Conv_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
}
node {
  name: "Conv_2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_2/weights/Initializer/truncated_normal/mul"
  input: "Conv_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
}
node {
  name: "Conv_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_2/weights/Assign"
  op: "Assign"
  input: "Conv_2/weights"
  input: "Conv_2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_2/weights/read"
  op: "Identity"
  input: "Conv_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
}
node {
  name: "Conv_2/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_2/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
}
node {
  name: "Conv_2/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_2/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_2/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
}
node {
  name: "Conv_2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_2/biases/Assign"
  op: "Assign"
  input: "Conv_2/biases"
  input: "Conv_2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_2/biases/read"
  op: "Identity"
  input: "Conv_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/biases"
      }
    }
  }
}
node {
  name: "Conv_2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_2/Conv2D"
  op: "Conv2D"
  input: "x"
  input: "Conv_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_2/BiasAdd"
  op: "BiasAdd"
  input: "Conv_2/Conv2D"
  input: "Conv_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_2/Relu"
  op: "Relu"
  input: "Conv_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_2/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_2/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_2/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_2/gamma"
  input: "BatchNorm_2/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_2/gamma/read"
  op: "Identity"
  input: "BatchNorm_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_2/beta/Assign"
  op: "Assign"
  input: "BatchNorm_2/beta"
  input: "BatchNorm_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_2/beta/read"
  op: "Identity"
  input: "BatchNorm_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_2/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_2/moving_mean"
  input: "BatchNorm_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_2/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_2/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_2/moving_variance"
  input: "BatchNorm_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_2/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_2/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_2/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_2/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_2/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_2/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_2/cond/Const"
  op: "Const"
  input: "^BatchNorm_2/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_2/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_2/Relu"
  input: "BatchNorm_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_2/gamma/read"
  input: "BatchNorm_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_2/beta/read"
  input: "BatchNorm_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_2/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_2/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_2/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_2/cond/Const"
  input: "BatchNorm_2/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_2/Relu"
  input: "BatchNorm_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_2/gamma/read"
  input: "BatchNorm_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_2/beta/read"
  input: "BatchNorm_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_2/moving_mean/read"
  input: "BatchNorm_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_2/moving_variance/read"
  input: "BatchNorm_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_2/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_2/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_2/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_2/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_2/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_2/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_2/cond/Merge"
  op: "Merge"
  input: "BatchNorm_2/cond/FusedBatchNorm_1"
  input: "BatchNorm_2/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_2/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_2/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_2/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_2/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_2/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_2/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_2/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_2/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_2/ExpandDims/input"
  input: "BatchNorm_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_2/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_2/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_2/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_2/ExpandDims_1/input"
  input: "BatchNorm_2/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_2/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_2/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_2/Select"
  op: "Select"
  input: "BatchNorm_2/Reshape"
  input: "BatchNorm_2/ExpandDims"
  input: "BatchNorm_2/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_2/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_2/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_2/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_2/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_2/AssignMovingAvg/read"
  input: "BatchNorm_2/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_2/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_2/AssignMovingAvg/Sub"
  input: "BatchNorm_2/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_2/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_2/moving_mean"
  input: "BatchNorm_2/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_2/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_2/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_2/AssignMovingAvg_1/read"
  input: "BatchNorm_2/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_2/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_2/AssignMovingAvg_1/Sub"
  input: "BatchNorm_2/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_2/moving_variance"
  input: "BatchNorm_2/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Dropout_1/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "Dropout_1/dropout/Shape"
  op: "Shape"
  input: "BatchNorm_2/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_1/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout_1/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout_1/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout_1/dropout/random_uniform/max"
  input: "Dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_1/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout_1/dropout/random_uniform/RandomUniform"
  input: "Dropout_1/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_1/dropout/random_uniform"
  op: "Add"
  input: "Dropout_1/dropout/random_uniform/mul"
  input: "Dropout_1/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_1/dropout/add"
  op: "Add"
  input: "Dropout_1/dropout/keep_prob"
  input: "Dropout_1/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_1/dropout/Floor"
  op: "Floor"
  input: "Dropout_1/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_1/dropout/div"
  op: "RealDiv"
  input: "BatchNorm_2/cond/Merge"
  input: "Dropout_1/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_1/dropout/mul"
  op: "Mul"
  input: "Dropout_1/dropout/div"
  input: "Dropout_1/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Conv_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
}
node {
  name: "Conv_3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_3/weights/Initializer/truncated_normal/mul"
  input: "Conv_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
}
node {
  name: "Conv_3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_3/weights/Assign"
  op: "Assign"
  input: "Conv_3/weights"
  input: "Conv_3/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_3/weights/read"
  op: "Identity"
  input: "Conv_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
}
node {
  name: "Conv_3/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_3/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
}
node {
  name: "Conv_3/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_3/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
}
node {
  name: "Conv_3/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_3/biases/Assign"
  op: "Assign"
  input: "Conv_3/biases"
  input: "Conv_3/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_3/biases/read"
  op: "Identity"
  input: "Conv_3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/biases"
      }
    }
  }
}
node {
  name: "Conv_3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_3/Conv2D"
  op: "Conv2D"
  input: "Dropout_1/dropout/mul"
  input: "Conv_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_3/BiasAdd"
  op: "BiasAdd"
  input: "Conv_3/Conv2D"
  input: "Conv_3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_3/Relu"
  op: "Relu"
  input: "Conv_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_3/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_3/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_3/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_3/gamma"
  input: "BatchNorm_3/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_3/gamma/read"
  op: "Identity"
  input: "BatchNorm_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_3/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_3/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_3/beta/Assign"
  op: "Assign"
  input: "BatchNorm_3/beta"
  input: "BatchNorm_3/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_3/beta/read"
  op: "Identity"
  input: "BatchNorm_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_3/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_3/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_3/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_3/moving_mean"
  input: "BatchNorm_3/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_3/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_3/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_3/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_3/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_3/moving_variance"
  input: "BatchNorm_3/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_3/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_3/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_3/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_3/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_3/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_3/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_3/cond/Const"
  op: "Const"
  input: "^BatchNorm_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_3/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_3/Relu"
  input: "BatchNorm_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_3/gamma/read"
  input: "BatchNorm_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_3/beta/read"
  input: "BatchNorm_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_3/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_3/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_3/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_3/cond/Const"
  input: "BatchNorm_3/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_3/Relu"
  input: "BatchNorm_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_3/gamma/read"
  input: "BatchNorm_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_3/beta/read"
  input: "BatchNorm_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_3/moving_mean/read"
  input: "BatchNorm_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_3/moving_variance/read"
  input: "BatchNorm_3/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_3/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_3/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_3/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_3/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_3/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_3/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_3/cond/Merge"
  op: "Merge"
  input: "BatchNorm_3/cond/FusedBatchNorm_1"
  input: "BatchNorm_3/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_3/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_3/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_3/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_3/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_3/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_3/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_3/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_3/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_3/ExpandDims/input"
  input: "BatchNorm_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_3/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_3/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_3/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_3/ExpandDims_1/input"
  input: "BatchNorm_3/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_3/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_3/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_3/Select"
  op: "Select"
  input: "BatchNorm_3/Reshape"
  input: "BatchNorm_3/ExpandDims"
  input: "BatchNorm_3/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_3/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_3/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_3/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_3/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_3/AssignMovingAvg/read"
  input: "BatchNorm_3/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_3/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_3/AssignMovingAvg/Sub"
  input: "BatchNorm_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_3/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_3/moving_mean"
  input: "BatchNorm_3/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_3/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_3/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_3/AssignMovingAvg_1/read"
  input: "BatchNorm_3/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_3/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_3/AssignMovingAvg_1/Sub"
  input: "BatchNorm_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_3/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_3/moving_variance"
  input: "BatchNorm_3/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "MaxPool2D_1/MaxPool"
  op: "MaxPool"
  input: "BatchNorm_3/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "Conv_4/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Conv_4/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_4/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_4/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_4/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_4/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_4/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_4/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
}
node {
  name: "Conv_4/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_4/weights/Initializer/truncated_normal/mul"
  input: "Conv_4/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
}
node {
  name: "Conv_4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_4/weights/Assign"
  op: "Assign"
  input: "Conv_4/weights"
  input: "Conv_4/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_4/weights/read"
  op: "Identity"
  input: "Conv_4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
}
node {
  name: "Conv_4/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_4/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
}
node {
  name: "Conv_4/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_4/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_4/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
}
node {
  name: "Conv_4/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_4/biases/Assign"
  op: "Assign"
  input: "Conv_4/biases"
  input: "Conv_4/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_4/biases/read"
  op: "Identity"
  input: "Conv_4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/biases"
      }
    }
  }
}
node {
  name: "Conv_4/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_4/Conv2D"
  op: "Conv2D"
  input: "x"
  input: "Conv_4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_4/BiasAdd"
  op: "BiasAdd"
  input: "Conv_4/Conv2D"
  input: "Conv_4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_4/Relu"
  op: "Relu"
  input: "Conv_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_4/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_4/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_4/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_4/gamma"
  input: "BatchNorm_4/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_4/gamma/read"
  op: "Identity"
  input: "BatchNorm_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_4/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_4/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_4/beta/Assign"
  op: "Assign"
  input: "BatchNorm_4/beta"
  input: "BatchNorm_4/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_4/beta/read"
  op: "Identity"
  input: "BatchNorm_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_4/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_4/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_4/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_4/moving_mean"
  input: "BatchNorm_4/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_4/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_4/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_4/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_4/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_4/moving_variance"
  input: "BatchNorm_4/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_4/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_4/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_4/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_4/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_4/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_4/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_4/cond/Const"
  op: "Const"
  input: "^BatchNorm_4/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_4/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_4/Relu"
  input: "BatchNorm_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_4/gamma/read"
  input: "BatchNorm_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_4/beta/read"
  input: "BatchNorm_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_4/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_4/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_4/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_4/cond/Const"
  input: "BatchNorm_4/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_4/Relu"
  input: "BatchNorm_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_4/gamma/read"
  input: "BatchNorm_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_4/beta/read"
  input: "BatchNorm_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_4/moving_mean/read"
  input: "BatchNorm_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_4/moving_variance/read"
  input: "BatchNorm_4/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_4/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_4/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_4/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_4/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_4/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_4/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_4/cond/Merge"
  op: "Merge"
  input: "BatchNorm_4/cond/FusedBatchNorm_1"
  input: "BatchNorm_4/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_4/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_4/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_4/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_4/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_4/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_4/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_4/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_4/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_4/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_4/ExpandDims/input"
  input: "BatchNorm_4/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_4/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_4/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_4/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_4/ExpandDims_1/input"
  input: "BatchNorm_4/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_4/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_4/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_4/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_4/Select"
  op: "Select"
  input: "BatchNorm_4/Reshape"
  input: "BatchNorm_4/ExpandDims"
  input: "BatchNorm_4/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_4/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_4/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_4/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_4/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_4/AssignMovingAvg/read"
  input: "BatchNorm_4/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_4/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_4/AssignMovingAvg/Sub"
  input: "BatchNorm_4/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_4/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_4/moving_mean"
  input: "BatchNorm_4/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_4/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_4/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_4/AssignMovingAvg_1/read"
  input: "BatchNorm_4/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_4/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_4/AssignMovingAvg_1/Sub"
  input: "BatchNorm_4/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_4/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_4/moving_variance"
  input: "BatchNorm_4/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Dropout_2/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "Dropout_2/dropout/Shape"
  op: "Shape"
  input: "BatchNorm_4/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_2/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout_2/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout_2/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout_2/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout_2/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout_2/dropout/random_uniform/max"
  input: "Dropout_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_2/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout_2/dropout/random_uniform/RandomUniform"
  input: "Dropout_2/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_2/dropout/random_uniform"
  op: "Add"
  input: "Dropout_2/dropout/random_uniform/mul"
  input: "Dropout_2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_2/dropout/add"
  op: "Add"
  input: "Dropout_2/dropout/keep_prob"
  input: "Dropout_2/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_2/dropout/Floor"
  op: "Floor"
  input: "Dropout_2/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_2/dropout/div"
  op: "RealDiv"
  input: "BatchNorm_4/cond/Merge"
  input: "Dropout_2/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_2/dropout/mul"
  op: "Mul"
  input: "Dropout_2/dropout/div"
  input: "Dropout_2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Conv_5/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Conv_5/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_5/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_5/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_5/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_5/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_5/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_5/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
}
node {
  name: "Conv_5/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_5/weights/Initializer/truncated_normal/mul"
  input: "Conv_5/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
}
node {
  name: "Conv_5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_5/weights/Assign"
  op: "Assign"
  input: "Conv_5/weights"
  input: "Conv_5/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_5/weights/read"
  op: "Identity"
  input: "Conv_5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
}
node {
  name: "Conv_5/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_5/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
}
node {
  name: "Conv_5/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_5/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_5/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
}
node {
  name: "Conv_5/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_5/biases/Assign"
  op: "Assign"
  input: "Conv_5/biases"
  input: "Conv_5/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_5/biases/read"
  op: "Identity"
  input: "Conv_5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/biases"
      }
    }
  }
}
node {
  name: "Conv_5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_5/Conv2D"
  op: "Conv2D"
  input: "Dropout_2/dropout/mul"
  input: "Conv_5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_5/BiasAdd"
  op: "BiasAdd"
  input: "Conv_5/Conv2D"
  input: "Conv_5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_5/Relu"
  op: "Relu"
  input: "Conv_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_5/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_5/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_5/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_5/gamma"
  input: "BatchNorm_5/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_5/gamma/read"
  op: "Identity"
  input: "BatchNorm_5/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_5/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_5/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_5/beta/Assign"
  op: "Assign"
  input: "BatchNorm_5/beta"
  input: "BatchNorm_5/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_5/beta/read"
  op: "Identity"
  input: "BatchNorm_5/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_5/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_5/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_5/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_5/moving_mean"
  input: "BatchNorm_5/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_5/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_5/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_5/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_5/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_5/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_5/moving_variance"
  input: "BatchNorm_5/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_5/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_5/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_5/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_5/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_5/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_5/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_5/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_5/cond/Const"
  op: "Const"
  input: "^BatchNorm_5/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_5/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_5/Relu"
  input: "BatchNorm_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_5/gamma/read"
  input: "BatchNorm_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_5/beta/read"
  input: "BatchNorm_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_5/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_5/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_5/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_5/cond/Const"
  input: "BatchNorm_5/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_5/Relu"
  input: "BatchNorm_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_5/gamma/read"
  input: "BatchNorm_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_5/beta/read"
  input: "BatchNorm_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_5/moving_mean/read"
  input: "BatchNorm_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_5/moving_variance/read"
  input: "BatchNorm_5/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_5/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_5/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_5/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_5/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_5/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_5/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_5/cond/Merge"
  op: "Merge"
  input: "BatchNorm_5/cond/FusedBatchNorm_1"
  input: "BatchNorm_5/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_5/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_5/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_5/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_5/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_5/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_5/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_5/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_5/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_5/ExpandDims/input"
  input: "BatchNorm_5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_5/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_5/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_5/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_5/ExpandDims_1/input"
  input: "BatchNorm_5/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_5/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_5/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_5/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_5/Select"
  op: "Select"
  input: "BatchNorm_5/Reshape"
  input: "BatchNorm_5/ExpandDims"
  input: "BatchNorm_5/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_5/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_5/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_5/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_5/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_5/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_5/AssignMovingAvg/read"
  input: "BatchNorm_5/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_5/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_5/AssignMovingAvg/Sub"
  input: "BatchNorm_5/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_5/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_5/moving_mean"
  input: "BatchNorm_5/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_5/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_5/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_5/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_5/AssignMovingAvg_1/read"
  input: "BatchNorm_5/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_5/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_5/AssignMovingAvg_1/Sub"
  input: "BatchNorm_5/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_5/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_5/moving_variance"
  input: "BatchNorm_5/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Dropout_3/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "Dropout_3/dropout/Shape"
  op: "Shape"
  input: "BatchNorm_5/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_3/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout_3/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout_3/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout_3/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout_3/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout_3/dropout/random_uniform/max"
  input: "Dropout_3/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_3/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout_3/dropout/random_uniform/RandomUniform"
  input: "Dropout_3/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_3/dropout/random_uniform"
  op: "Add"
  input: "Dropout_3/dropout/random_uniform/mul"
  input: "Dropout_3/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_3/dropout/add"
  op: "Add"
  input: "Dropout_3/dropout/keep_prob"
  input: "Dropout_3/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_3/dropout/Floor"
  op: "Floor"
  input: "Dropout_3/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_3/dropout/div"
  op: "RealDiv"
  input: "BatchNorm_5/cond/Merge"
  input: "Dropout_3/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_3/dropout/mul"
  op: "Mul"
  input: "Dropout_3/dropout/div"
  input: "Dropout_3/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Conv_6/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Conv_6/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_6/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_6/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_6/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_6/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_6/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_6/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
}
node {
  name: "Conv_6/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_6/weights/Initializer/truncated_normal/mul"
  input: "Conv_6/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
}
node {
  name: "Conv_6/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_6/weights/Assign"
  op: "Assign"
  input: "Conv_6/weights"
  input: "Conv_6/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_6/weights/read"
  op: "Identity"
  input: "Conv_6/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
}
node {
  name: "Conv_6/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_6/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
}
node {
  name: "Conv_6/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_6/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_6/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
}
node {
  name: "Conv_6/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_6/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_6/biases/Assign"
  op: "Assign"
  input: "Conv_6/biases"
  input: "Conv_6/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_6/biases/read"
  op: "Identity"
  input: "Conv_6/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/biases"
      }
    }
  }
}
node {
  name: "Conv_6/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_6/Conv2D"
  op: "Conv2D"
  input: "Dropout_3/dropout/mul"
  input: "Conv_6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_6/BiasAdd"
  op: "BiasAdd"
  input: "Conv_6/Conv2D"
  input: "Conv_6/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_6/Relu"
  op: "Relu"
  input: "Conv_6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_6/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_6/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_6/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_6/gamma"
  input: "BatchNorm_6/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_6/gamma/read"
  op: "Identity"
  input: "BatchNorm_6/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_6/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_6/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_6/beta/Assign"
  op: "Assign"
  input: "BatchNorm_6/beta"
  input: "BatchNorm_6/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_6/beta/read"
  op: "Identity"
  input: "BatchNorm_6/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_6/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_6/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_6/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_6/moving_mean"
  input: "BatchNorm_6/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_6/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_6/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_6/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_6/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_6/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_6/moving_variance"
  input: "BatchNorm_6/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_6/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_6/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_6/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_6/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_6/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_6/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_6/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_6/cond/Const"
  op: "Const"
  input: "^BatchNorm_6/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_6/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_6/Relu"
  input: "BatchNorm_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_6/gamma/read"
  input: "BatchNorm_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_6/beta/read"
  input: "BatchNorm_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_6/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_6/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_6/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_6/cond/Const"
  input: "BatchNorm_6/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_6/Relu"
  input: "BatchNorm_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_6/gamma/read"
  input: "BatchNorm_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_6/beta/read"
  input: "BatchNorm_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_6/moving_mean/read"
  input: "BatchNorm_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_6/moving_variance/read"
  input: "BatchNorm_6/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_6/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_6/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_6/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_6/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_6/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_6/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_6/cond/Merge"
  op: "Merge"
  input: "BatchNorm_6/cond/FusedBatchNorm_1"
  input: "BatchNorm_6/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_6/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_6/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_6/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_6/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_6/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_6/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_6/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_6/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_6/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_6/ExpandDims/input"
  input: "BatchNorm_6/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_6/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_6/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_6/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_6/ExpandDims_1/input"
  input: "BatchNorm_6/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_6/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_6/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_6/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_6/Select"
  op: "Select"
  input: "BatchNorm_6/Reshape"
  input: "BatchNorm_6/ExpandDims"
  input: "BatchNorm_6/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_6/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_6/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_6/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_6/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_6/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_6/AssignMovingAvg/read"
  input: "BatchNorm_6/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_6/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_6/AssignMovingAvg/Sub"
  input: "BatchNorm_6/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_6/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_6/moving_mean"
  input: "BatchNorm_6/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_6/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_6/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_6/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_6/AssignMovingAvg_1/read"
  input: "BatchNorm_6/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_6/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_6/AssignMovingAvg_1/Sub"
  input: "BatchNorm_6/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_6/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_6/moving_variance"
  input: "BatchNorm_6/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "MaxPool2D_2/MaxPool"
  op: "MaxPool"
  input: "BatchNorm_6/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "Conv_7/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "Conv_7/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_7/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_7/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_7/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_7/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_7/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_7/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
}
node {
  name: "Conv_7/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_7/weights/Initializer/truncated_normal/mul"
  input: "Conv_7/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
}
node {
  name: "Conv_7/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_7/weights/Assign"
  op: "Assign"
  input: "Conv_7/weights"
  input: "Conv_7/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_7/weights/read"
  op: "Identity"
  input: "Conv_7/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
}
node {
  name: "Conv_7/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_7/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_7/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
}
node {
  name: "Conv_7/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_7/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_7/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
}
node {
  name: "Conv_7/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_7/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_7/biases/Assign"
  op: "Assign"
  input: "Conv_7/biases"
  input: "Conv_7/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_7/biases/read"
  op: "Identity"
  input: "Conv_7/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/biases"
      }
    }
  }
}
node {
  name: "Conv_7/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_7/Conv2D"
  op: "Conv2D"
  input: "x"
  input: "Conv_7/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_7/BiasAdd"
  op: "BiasAdd"
  input: "Conv_7/Conv2D"
  input: "Conv_7/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_7/Relu"
  op: "Relu"
  input: "Conv_7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_7/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_7/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_7/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_7/gamma"
  input: "BatchNorm_7/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_7/gamma/read"
  op: "Identity"
  input: "BatchNorm_7/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_7/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_7/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_7/beta/Assign"
  op: "Assign"
  input: "BatchNorm_7/beta"
  input: "BatchNorm_7/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_7/beta/read"
  op: "Identity"
  input: "BatchNorm_7/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_7/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_7/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_7/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_7/moving_mean"
  input: "BatchNorm_7/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_7/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_7/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_7/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_7/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_7/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_7/moving_variance"
  input: "BatchNorm_7/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_7/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_7/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_7/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_7/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_7/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_7/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_7/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_7/cond/Const"
  op: "Const"
  input: "^BatchNorm_7/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_7/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_7/Relu"
  input: "BatchNorm_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_7/gamma/read"
  input: "BatchNorm_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_7/beta/read"
  input: "BatchNorm_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_7/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_7/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_7/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_7/cond/Const"
  input: "BatchNorm_7/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_7/Relu"
  input: "BatchNorm_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_7/gamma/read"
  input: "BatchNorm_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_7/beta/read"
  input: "BatchNorm_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_7/moving_mean/read"
  input: "BatchNorm_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_7/moving_variance/read"
  input: "BatchNorm_7/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_7/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_7/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_7/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_7/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_7/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_7/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_7/cond/Merge"
  op: "Merge"
  input: "BatchNorm_7/cond/FusedBatchNorm_1"
  input: "BatchNorm_7/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_7/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_7/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_7/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_7/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_7/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_7/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_7/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_7/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_7/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_7/ExpandDims/input"
  input: "BatchNorm_7/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_7/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_7/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_7/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_7/ExpandDims_1/input"
  input: "BatchNorm_7/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_7/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_7/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_7/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_7/Select"
  op: "Select"
  input: "BatchNorm_7/Reshape"
  input: "BatchNorm_7/ExpandDims"
  input: "BatchNorm_7/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_7/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_7/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_7/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_7/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_7/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_7/AssignMovingAvg/read"
  input: "BatchNorm_7/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_7/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_7/AssignMovingAvg/Sub"
  input: "BatchNorm_7/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_7/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_7/moving_mean"
  input: "BatchNorm_7/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_7/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_7/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_7/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_7/AssignMovingAvg_1/read"
  input: "BatchNorm_7/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_7/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_7/AssignMovingAvg_1/Sub"
  input: "BatchNorm_7/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_7/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_7/moving_variance"
  input: "BatchNorm_7/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Dropout_4/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "Dropout_4/dropout/Shape"
  op: "Shape"
  input: "BatchNorm_7/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_4/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout_4/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout_4/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout_4/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout_4/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout_4/dropout/random_uniform/max"
  input: "Dropout_4/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_4/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout_4/dropout/random_uniform/RandomUniform"
  input: "Dropout_4/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_4/dropout/random_uniform"
  op: "Add"
  input: "Dropout_4/dropout/random_uniform/mul"
  input: "Dropout_4/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_4/dropout/add"
  op: "Add"
  input: "Dropout_4/dropout/keep_prob"
  input: "Dropout_4/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_4/dropout/Floor"
  op: "Floor"
  input: "Dropout_4/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_4/dropout/div"
  op: "RealDiv"
  input: "BatchNorm_7/cond/Merge"
  input: "Dropout_4/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_4/dropout/mul"
  op: "Mul"
  input: "Dropout_4/dropout/div"
  input: "Dropout_4/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Conv_8/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "Conv_8/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_8/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_8/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_8/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_8/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_8/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_8/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
}
node {
  name: "Conv_8/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_8/weights/Initializer/truncated_normal/mul"
  input: "Conv_8/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
}
node {
  name: "Conv_8/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_8/weights/Assign"
  op: "Assign"
  input: "Conv_8/weights"
  input: "Conv_8/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_8/weights/read"
  op: "Identity"
  input: "Conv_8/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
}
node {
  name: "Conv_8/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_8/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_8/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
}
node {
  name: "Conv_8/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_8/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_8/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
}
node {
  name: "Conv_8/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_8/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_8/biases/Assign"
  op: "Assign"
  input: "Conv_8/biases"
  input: "Conv_8/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_8/biases/read"
  op: "Identity"
  input: "Conv_8/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/biases"
      }
    }
  }
}
node {
  name: "Conv_8/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_8/Conv2D"
  op: "Conv2D"
  input: "Dropout_4/dropout/mul"
  input: "Conv_8/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_8/BiasAdd"
  op: "BiasAdd"
  input: "Conv_8/Conv2D"
  input: "Conv_8/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_8/Relu"
  op: "Relu"
  input: "Conv_8/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_8/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_8/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_8/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_8/gamma"
  input: "BatchNorm_8/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_8/gamma/read"
  op: "Identity"
  input: "BatchNorm_8/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_8/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_8/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_8/beta/Assign"
  op: "Assign"
  input: "BatchNorm_8/beta"
  input: "BatchNorm_8/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_8/beta/read"
  op: "Identity"
  input: "BatchNorm_8/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_8/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_8/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_8/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_8/moving_mean"
  input: "BatchNorm_8/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_8/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_8/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_8/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_8/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_8/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_8/moving_variance"
  input: "BatchNorm_8/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_8/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_8/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_8/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_8/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_8/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_8/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_8/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_8/cond/Const"
  op: "Const"
  input: "^BatchNorm_8/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_8/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_8/Relu"
  input: "BatchNorm_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_8/gamma/read"
  input: "BatchNorm_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_8/beta/read"
  input: "BatchNorm_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_8/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_8/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_8/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_8/cond/Const"
  input: "BatchNorm_8/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_8/Relu"
  input: "BatchNorm_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_8/gamma/read"
  input: "BatchNorm_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_8/beta/read"
  input: "BatchNorm_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_8/moving_mean/read"
  input: "BatchNorm_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_8/moving_variance/read"
  input: "BatchNorm_8/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_8/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_8/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_8/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_8/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_8/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_8/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_8/cond/Merge"
  op: "Merge"
  input: "BatchNorm_8/cond/FusedBatchNorm_1"
  input: "BatchNorm_8/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_8/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_8/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_8/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_8/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_8/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_8/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_8/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_8/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_8/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_8/ExpandDims/input"
  input: "BatchNorm_8/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_8/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_8/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_8/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_8/ExpandDims_1/input"
  input: "BatchNorm_8/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_8/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_8/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_8/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_8/Select"
  op: "Select"
  input: "BatchNorm_8/Reshape"
  input: "BatchNorm_8/ExpandDims"
  input: "BatchNorm_8/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_8/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_8/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_8/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_8/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_8/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_8/AssignMovingAvg/read"
  input: "BatchNorm_8/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_8/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_8/AssignMovingAvg/Sub"
  input: "BatchNorm_8/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_8/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_8/moving_mean"
  input: "BatchNorm_8/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_8/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_8/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_8/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_8/AssignMovingAvg_1/read"
  input: "BatchNorm_8/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_8/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_8/AssignMovingAvg_1/Sub"
  input: "BatchNorm_8/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_8/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_8/moving_variance"
  input: "BatchNorm_8/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Dropout_5/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "Dropout_5/dropout/Shape"
  op: "Shape"
  input: "BatchNorm_8/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_5/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout_5/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout_5/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout_5/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout_5/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout_5/dropout/random_uniform/max"
  input: "Dropout_5/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_5/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout_5/dropout/random_uniform/RandomUniform"
  input: "Dropout_5/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_5/dropout/random_uniform"
  op: "Add"
  input: "Dropout_5/dropout/random_uniform/mul"
  input: "Dropout_5/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_5/dropout/add"
  op: "Add"
  input: "Dropout_5/dropout/keep_prob"
  input: "Dropout_5/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_5/dropout/Floor"
  op: "Floor"
  input: "Dropout_5/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_5/dropout/div"
  op: "RealDiv"
  input: "BatchNorm_8/cond/Merge"
  input: "Dropout_5/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_5/dropout/mul"
  op: "Mul"
  input: "Dropout_5/dropout/div"
  input: "Dropout_5/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Conv_9/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "Conv_9/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_9/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_9/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_9/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_9/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_9/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_9/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
}
node {
  name: "Conv_9/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_9/weights/Initializer/truncated_normal/mul"
  input: "Conv_9/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
}
node {
  name: "Conv_9/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_9/weights/Assign"
  op: "Assign"
  input: "Conv_9/weights"
  input: "Conv_9/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_9/weights/read"
  op: "Identity"
  input: "Conv_9/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
}
node {
  name: "Conv_9/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_9/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_9/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
}
node {
  name: "Conv_9/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_9/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_9/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
}
node {
  name: "Conv_9/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_9/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_9/biases/Assign"
  op: "Assign"
  input: "Conv_9/biases"
  input: "Conv_9/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_9/biases/read"
  op: "Identity"
  input: "Conv_9/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/biases"
      }
    }
  }
}
node {
  name: "Conv_9/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_9/Conv2D"
  op: "Conv2D"
  input: "Dropout_5/dropout/mul"
  input: "Conv_9/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_9/BiasAdd"
  op: "BiasAdd"
  input: "Conv_9/Conv2D"
  input: "Conv_9/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_9/Relu"
  op: "Relu"
  input: "Conv_9/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_9/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_9/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_9/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_9/gamma"
  input: "BatchNorm_9/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_9/gamma/read"
  op: "Identity"
  input: "BatchNorm_9/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_9/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_9/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_9/beta/Assign"
  op: "Assign"
  input: "BatchNorm_9/beta"
  input: "BatchNorm_9/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_9/beta/read"
  op: "Identity"
  input: "BatchNorm_9/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_9/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_9/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_9/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_9/moving_mean"
  input: "BatchNorm_9/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_9/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_9/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_9/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_9/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_9/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_9/moving_variance"
  input: "BatchNorm_9/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_9/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_9/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_9/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_9/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_9/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_9/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_9/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_9/cond/Const"
  op: "Const"
  input: "^BatchNorm_9/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_9/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_9/Relu"
  input: "BatchNorm_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_9/gamma/read"
  input: "BatchNorm_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_9/beta/read"
  input: "BatchNorm_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_9/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_9/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_9/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_9/cond/Const"
  input: "BatchNorm_9/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_9/Relu"
  input: "BatchNorm_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_9/gamma/read"
  input: "BatchNorm_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_9/beta/read"
  input: "BatchNorm_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_9/moving_mean/read"
  input: "BatchNorm_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_9/moving_variance/read"
  input: "BatchNorm_9/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_9/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_9/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_9/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_9/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_9/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_9/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_9/cond/Merge"
  op: "Merge"
  input: "BatchNorm_9/cond/FusedBatchNorm_1"
  input: "BatchNorm_9/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_9/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_9/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_9/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_9/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_9/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_9/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_9/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_9/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_9/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_9/ExpandDims/input"
  input: "BatchNorm_9/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_9/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_9/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_9/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_9/ExpandDims_1/input"
  input: "BatchNorm_9/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_9/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_9/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_9/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_9/Select"
  op: "Select"
  input: "BatchNorm_9/Reshape"
  input: "BatchNorm_9/ExpandDims"
  input: "BatchNorm_9/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_9/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_9/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_9/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_9/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_9/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_9/AssignMovingAvg/read"
  input: "BatchNorm_9/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_9/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_9/AssignMovingAvg/Sub"
  input: "BatchNorm_9/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_9/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_9/moving_mean"
  input: "BatchNorm_9/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_9/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_9/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_9/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_9/AssignMovingAvg_1/read"
  input: "BatchNorm_9/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_9/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_9/AssignMovingAvg_1/Sub"
  input: "BatchNorm_9/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_9/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_9/moving_variance"
  input: "BatchNorm_9/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "MaxPool2D_3/MaxPool"
  op: "MaxPool"
  input: "BatchNorm_9/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "Conv_10/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "Conv_10/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_10/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_10/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_10/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_10/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_10/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_10/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
}
node {
  name: "Conv_10/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_10/weights/Initializer/truncated_normal/mul"
  input: "Conv_10/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
}
node {
  name: "Conv_10/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_10/weights/Assign"
  op: "Assign"
  input: "Conv_10/weights"
  input: "Conv_10/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_10/weights/read"
  op: "Identity"
  input: "Conv_10/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
}
node {
  name: "Conv_10/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_10/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_10/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
}
node {
  name: "Conv_10/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_10/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_10/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
}
node {
  name: "Conv_10/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_10/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_10/biases/Assign"
  op: "Assign"
  input: "Conv_10/biases"
  input: "Conv_10/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_10/biases/read"
  op: "Identity"
  input: "Conv_10/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/biases"
      }
    }
  }
}
node {
  name: "Conv_10/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_10/Conv2D"
  op: "Conv2D"
  input: "x"
  input: "Conv_10/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_10/BiasAdd"
  op: "BiasAdd"
  input: "Conv_10/Conv2D"
  input: "Conv_10/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_10/Relu"
  op: "Relu"
  input: "Conv_10/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_10/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_10/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_10/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_10/gamma"
  input: "BatchNorm_10/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_10/gamma/read"
  op: "Identity"
  input: "BatchNorm_10/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_10/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_10/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_10/beta/Assign"
  op: "Assign"
  input: "BatchNorm_10/beta"
  input: "BatchNorm_10/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_10/beta/read"
  op: "Identity"
  input: "BatchNorm_10/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_10/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_10/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_10/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_10/moving_mean"
  input: "BatchNorm_10/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_10/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_10/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_10/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_10/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_10/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_10/moving_variance"
  input: "BatchNorm_10/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_10/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_10/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_10/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_10/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_10/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_10/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_10/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_10/cond/Const"
  op: "Const"
  input: "^BatchNorm_10/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_10/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_10/Relu"
  input: "BatchNorm_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_10/gamma/read"
  input: "BatchNorm_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_10/beta/read"
  input: "BatchNorm_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_10/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_10/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_10/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_10/cond/Const"
  input: "BatchNorm_10/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_10/Relu"
  input: "BatchNorm_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_10/gamma/read"
  input: "BatchNorm_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_10/beta/read"
  input: "BatchNorm_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_10/moving_mean/read"
  input: "BatchNorm_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_10/moving_variance/read"
  input: "BatchNorm_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_10/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_10/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_10/cond/Merge"
  op: "Merge"
  input: "BatchNorm_10/cond/FusedBatchNorm_1"
  input: "BatchNorm_10/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_10/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_10/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_10/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_10/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_10/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_10/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_10/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_10/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_10/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_10/ExpandDims/input"
  input: "BatchNorm_10/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_10/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_10/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_10/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_10/ExpandDims_1/input"
  input: "BatchNorm_10/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_10/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_10/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_10/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_10/Select"
  op: "Select"
  input: "BatchNorm_10/Reshape"
  input: "BatchNorm_10/ExpandDims"
  input: "BatchNorm_10/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_10/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_10/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_10/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_10/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_10/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_10/AssignMovingAvg/read"
  input: "BatchNorm_10/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_10/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_10/AssignMovingAvg/Sub"
  input: "BatchNorm_10/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_10/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_10/moving_mean"
  input: "BatchNorm_10/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_10/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_10/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_10/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_10/AssignMovingAvg_1/read"
  input: "BatchNorm_10/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_10/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_10/AssignMovingAvg_1/Sub"
  input: "BatchNorm_10/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_10/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_10/moving_variance"
  input: "BatchNorm_10/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Dropout_6/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "Dropout_6/dropout/Shape"
  op: "Shape"
  input: "BatchNorm_10/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_6/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout_6/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout_6/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout_6/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout_6/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout_6/dropout/random_uniform/max"
  input: "Dropout_6/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_6/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout_6/dropout/random_uniform/RandomUniform"
  input: "Dropout_6/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_6/dropout/random_uniform"
  op: "Add"
  input: "Dropout_6/dropout/random_uniform/mul"
  input: "Dropout_6/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_6/dropout/add"
  op: "Add"
  input: "Dropout_6/dropout/keep_prob"
  input: "Dropout_6/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_6/dropout/Floor"
  op: "Floor"
  input: "Dropout_6/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_6/dropout/div"
  op: "RealDiv"
  input: "BatchNorm_10/cond/Merge"
  input: "Dropout_6/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_6/dropout/mul"
  op: "Mul"
  input: "Dropout_6/dropout/div"
  input: "Dropout_6/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Conv_11/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "Conv_11/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_11/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_11/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_11/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_11/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_11/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_11/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
}
node {
  name: "Conv_11/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_11/weights/Initializer/truncated_normal/mul"
  input: "Conv_11/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
}
node {
  name: "Conv_11/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_11/weights/Assign"
  op: "Assign"
  input: "Conv_11/weights"
  input: "Conv_11/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_11/weights/read"
  op: "Identity"
  input: "Conv_11/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
}
node {
  name: "Conv_11/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_11/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_11/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
}
node {
  name: "Conv_11/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_11/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_11/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
}
node {
  name: "Conv_11/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_11/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_11/biases/Assign"
  op: "Assign"
  input: "Conv_11/biases"
  input: "Conv_11/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_11/biases/read"
  op: "Identity"
  input: "Conv_11/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/biases"
      }
    }
  }
}
node {
  name: "Conv_11/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_11/Conv2D"
  op: "Conv2D"
  input: "Dropout_6/dropout/mul"
  input: "Conv_11/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_11/BiasAdd"
  op: "BiasAdd"
  input: "Conv_11/Conv2D"
  input: "Conv_11/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_11/Relu"
  op: "Relu"
  input: "Conv_11/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_11/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_11/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_11/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_11/gamma"
  input: "BatchNorm_11/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_11/gamma/read"
  op: "Identity"
  input: "BatchNorm_11/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_11/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_11/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_11/beta/Assign"
  op: "Assign"
  input: "BatchNorm_11/beta"
  input: "BatchNorm_11/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_11/beta/read"
  op: "Identity"
  input: "BatchNorm_11/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_11/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_11/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_11/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_11/moving_mean"
  input: "BatchNorm_11/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_11/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_11/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_11/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_11/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_11/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_11/moving_variance"
  input: "BatchNorm_11/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_11/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_11/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_11/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_11/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_11/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_11/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_11/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_11/cond/Const"
  op: "Const"
  input: "^BatchNorm_11/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_11/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_11/Relu"
  input: "BatchNorm_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_11/gamma/read"
  input: "BatchNorm_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_11/beta/read"
  input: "BatchNorm_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_11/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_11/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_11/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_11/cond/Const"
  input: "BatchNorm_11/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_11/Relu"
  input: "BatchNorm_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_11/gamma/read"
  input: "BatchNorm_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_11/beta/read"
  input: "BatchNorm_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_11/moving_mean/read"
  input: "BatchNorm_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_11/moving_variance/read"
  input: "BatchNorm_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_11/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_11/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_11/cond/Merge"
  op: "Merge"
  input: "BatchNorm_11/cond/FusedBatchNorm_1"
  input: "BatchNorm_11/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_11/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_11/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_11/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_11/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_11/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_11/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_11/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_11/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_11/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_11/ExpandDims/input"
  input: "BatchNorm_11/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_11/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_11/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_11/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_11/ExpandDims_1/input"
  input: "BatchNorm_11/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_11/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_11/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_11/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_11/Select"
  op: "Select"
  input: "BatchNorm_11/Reshape"
  input: "BatchNorm_11/ExpandDims"
  input: "BatchNorm_11/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_11/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_11/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_11/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_11/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_11/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_11/AssignMovingAvg/read"
  input: "BatchNorm_11/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_11/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_11/AssignMovingAvg/Sub"
  input: "BatchNorm_11/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_11/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_11/moving_mean"
  input: "BatchNorm_11/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_11/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_11/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_11/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_11/AssignMovingAvg_1/read"
  input: "BatchNorm_11/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_11/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_11/AssignMovingAvg_1/Sub"
  input: "BatchNorm_11/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_11/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_11/moving_variance"
  input: "BatchNorm_11/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Dropout_7/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "Dropout_7/dropout/Shape"
  op: "Shape"
  input: "BatchNorm_11/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_7/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout_7/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout_7/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout_7/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout_7/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout_7/dropout/random_uniform/max"
  input: "Dropout_7/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_7/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout_7/dropout/random_uniform/RandomUniform"
  input: "Dropout_7/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_7/dropout/random_uniform"
  op: "Add"
  input: "Dropout_7/dropout/random_uniform/mul"
  input: "Dropout_7/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_7/dropout/add"
  op: "Add"
  input: "Dropout_7/dropout/keep_prob"
  input: "Dropout_7/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_7/dropout/Floor"
  op: "Floor"
  input: "Dropout_7/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_7/dropout/div"
  op: "RealDiv"
  input: "BatchNorm_11/cond/Merge"
  input: "Dropout_7/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_7/dropout/mul"
  op: "Mul"
  input: "Dropout_7/dropout/div"
  input: "Dropout_7/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Conv_12/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "Conv_12/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_12/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Conv_12/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Conv_12/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Conv_12/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Conv_12/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Conv_12/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
}
node {
  name: "Conv_12/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Conv_12/weights/Initializer/truncated_normal/mul"
  input: "Conv_12/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
}
node {
  name: "Conv_12/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_12/weights/Assign"
  op: "Assign"
  input: "Conv_12/weights"
  input: "Conv_12/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_12/weights/read"
  op: "Identity"
  input: "Conv_12/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
}
node {
  name: "Conv_12/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "Conv_12/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Conv_12/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
}
node {
  name: "Conv_12/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Conv_12/kernel/Regularizer/l2_regularizer/scale"
  input: "Conv_12/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
}
node {
  name: "Conv_12/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Conv_12/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Conv_12/biases/Assign"
  op: "Assign"
  input: "Conv_12/biases"
  input: "Conv_12/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_12/biases/read"
  op: "Identity"
  input: "Conv_12/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/biases"
      }
    }
  }
}
node {
  name: "Conv_12/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Conv_12/Conv2D"
  op: "Conv2D"
  input: "Dropout_7/dropout/mul"
  input: "Conv_12/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Conv_12/BiasAdd"
  op: "BiasAdd"
  input: "Conv_12/Conv2D"
  input: "Conv_12/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Conv_12/Relu"
  op: "Relu"
  input: "Conv_12/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_12/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_12/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_12/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_12/gamma"
  input: "BatchNorm_12/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_12/gamma/read"
  op: "Identity"
  input: "BatchNorm_12/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_12/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_12/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_12/beta/Assign"
  op: "Assign"
  input: "BatchNorm_12/beta"
  input: "BatchNorm_12/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_12/beta/read"
  op: "Identity"
  input: "BatchNorm_12/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_12/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_12/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_12/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_12/moving_mean"
  input: "BatchNorm_12/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_12/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_12/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_12/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_12/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_12/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_12/moving_variance"
  input: "BatchNorm_12/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_12/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_12/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_12/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_12/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_12/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_12/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_12/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_12/cond/Const"
  op: "Const"
  input: "^BatchNorm_12/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_12/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Conv_12/Relu"
  input: "BatchNorm_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_12/gamma/read"
  input: "BatchNorm_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_12/beta/read"
  input: "BatchNorm_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_12/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_12/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_12/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_12/cond/Const"
  input: "BatchNorm_12/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Conv_12/Relu"
  input: "BatchNorm_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/Relu"
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_12/gamma/read"
  input: "BatchNorm_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_12/beta/read"
  input: "BatchNorm_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_12/moving_mean/read"
  input: "BatchNorm_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_12/moving_variance/read"
  input: "BatchNorm_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_12/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_12/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_12/cond/Merge"
  op: "Merge"
  input: "BatchNorm_12/cond/FusedBatchNorm_1"
  input: "BatchNorm_12/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_12/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_12/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_12/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_12/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_12/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_12/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_12/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_12/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_12/ExpandDims"
  op: "ExpandDims"
  input: "BatchNorm_12/ExpandDims/input"
  input: "BatchNorm_12/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_12/ExpandDims_1/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_12/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "BatchNorm_12/ExpandDims_1"
  op: "ExpandDims"
  input: "BatchNorm_12/ExpandDims_1/input"
  input: "BatchNorm_12/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_12/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "BatchNorm_12/Reshape"
  op: "Reshape"
  input: "Placeholder_1"
  input: "BatchNorm_12/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_12/Select"
  op: "Select"
  input: "BatchNorm_12/Reshape"
  input: "BatchNorm_12/ExpandDims"
  input: "BatchNorm_12/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_12/Squeeze"
  op: "Squeeze"
  input: "BatchNorm_12/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "BatchNorm_12/AssignMovingAvg/read"
  op: "Identity"
  input: "BatchNorm_12/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_12/AssignMovingAvg/Sub"
  op: "Sub"
  input: "BatchNorm_12/AssignMovingAvg/read"
  input: "BatchNorm_12/cond/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_12/AssignMovingAvg/Mul"
  op: "Mul"
  input: "BatchNorm_12/AssignMovingAvg/Sub"
  input: "BatchNorm_12/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_12/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_12/moving_mean"
  input: "BatchNorm_12/AssignMovingAvg/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_12/AssignMovingAvg_1/read"
  op: "Identity"
  input: "BatchNorm_12/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_12/AssignMovingAvg_1/Sub"
  op: "Sub"
  input: "BatchNorm_12/AssignMovingAvg_1/read"
  input: "BatchNorm_12/cond/Merge_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_12/AssignMovingAvg_1/Mul"
  op: "Mul"
  input: "BatchNorm_12/AssignMovingAvg_1/Sub"
  input: "BatchNorm_12/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_12/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_12/moving_variance"
  input: "BatchNorm_12/AssignMovingAvg_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "MaxPool2D_4/MaxPool"
  op: "MaxPool"
  input: "BatchNorm_12/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "Dropout_8/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "Dropout_8/dropout/Shape"
  op: "Shape"
  input: "MaxPool2D_4/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_8/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout_8/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout_8/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout_8/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout_8/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout_8/dropout/random_uniform/max"
  input: "Dropout_8/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_8/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout_8/dropout/random_uniform/RandomUniform"
  input: "Dropout_8/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_8/dropout/random_uniform"
  op: "Add"
  input: "Dropout_8/dropout/random_uniform/mul"
  input: "Dropout_8/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_8/dropout/add"
  op: "Add"
  input: "Dropout_8/dropout/keep_prob"
  input: "Dropout_8/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_8/dropout/Floor"
  op: "Floor"
  input: "Dropout_8/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_8/dropout/div"
  op: "RealDiv"
  input: "MaxPool2D_4/MaxPool"
  input: "Dropout_8/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_8/dropout/mul"
  op: "Mul"
  input: "Dropout_8/dropout/div"
  input: "Dropout_8/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Flatten/flatten/Shape"
  op: "Shape"
  input: "Dropout_8/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Flatten/flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Flatten/flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Flatten/flatten/strided_slice"
  op: "StridedSlice"
  input: "Flatten/flatten/Shape"
  input: "Flatten/flatten/strided_slice/stack"
  input: "Flatten/flatten/strided_slice/stack_1"
  input: "Flatten/flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Flatten/flatten/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Flatten/flatten/Reshape/shape"
  op: "Pack"
  input: "Flatten/flatten/strided_slice"
  input: "Flatten/flatten/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Flatten/flatten/Reshape"
  op: "Reshape"
  input: "Dropout_8/dropout/mul"
  input: "Flatten/flatten/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\002\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "fully_connected/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "fully_connected/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "fully_connected/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/truncated_normal"
  op: "Add"
  input: "fully_connected/weights/Initializer/truncated_normal/mul"
  input: "fully_connected/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 131072
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "fully_connected/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "fully_connected/kernel/Regularizer/l2_regularizer/scale"
  input: "fully_connected/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
}
node {
  name: "fully_connected/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/biases/Assign"
  op: "Assign"
  input: "fully_connected/biases"
  input: "fully_connected/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/biases/read"
  op: "Identity"
  input: "fully_connected/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
}
node {
  name: "fully_connected/MatMul"
  op: "MatMul"
  input: "Flatten/flatten/Reshape"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/MatMul"
  input: "fully_connected/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected/Relu"
  op: "Relu"
  input: "fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_13/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\001\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "BatchNorm_13/Reshape"
  op: "Reshape"
  input: "fully_connected/Relu"
  input: "BatchNorm_13/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_13/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_13/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_13/beta/Assign"
  op: "Assign"
  input: "BatchNorm_13/beta"
  input: "BatchNorm_13/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_13/beta/read"
  op: "Identity"
  input: "BatchNorm_13/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_13/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_13/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_13/gamma/Assign"
  op: "Assign"
  input: "BatchNorm_13/gamma"
  input: "BatchNorm_13/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_13/gamma/read"
  op: "Identity"
  input: "BatchNorm_13/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_13/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BatchNorm_13/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_13/moving_mean/Assign"
  op: "Assign"
  input: "BatchNorm_13/moving_mean"
  input: "BatchNorm_13/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_13/moving_mean/read"
  op: "Identity"
  input: "BatchNorm_13/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_13/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "BatchNorm_13/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BatchNorm_13/moving_variance/Assign"
  op: "Assign"
  input: "BatchNorm_13/moving_variance"
  input: "BatchNorm_13/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_13/moving_variance/read"
  op: "Identity"
  input: "BatchNorm_13/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_13/cond/switch_t"
  op: "Identity"
  input: "BatchNorm_13/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_13/cond/switch_f"
  op: "Identity"
  input: "BatchNorm_13/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_13/cond/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_13/cond/Const"
  op: "Const"
  input: "^BatchNorm_13/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/Const_1"
  op: "Const"
  input: "^BatchNorm_13/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "BatchNorm_13/Reshape"
  input: "BatchNorm_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/Reshape"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "BatchNorm_13/gamma/read"
  input: "BatchNorm_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "BatchNorm_13/beta/read"
  input: "BatchNorm_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "BatchNorm_13/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_13/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_13/cond/FusedBatchNorm/Switch_2:1"
  input: "BatchNorm_13/cond/Const"
  input: "BatchNorm_13/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "BatchNorm_13/Reshape"
  input: "BatchNorm_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/Reshape"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_13/gamma/read"
  input: "BatchNorm_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/gamma"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_13/beta/read"
  input: "BatchNorm_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/beta"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "BatchNorm_13/moving_mean/read"
  input: "BatchNorm_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "BatchNorm_13/moving_variance/read"
  input: "BatchNorm_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "BatchNorm_13/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_2"
  input: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_13/cond/Merge"
  op: "Merge"
  input: "BatchNorm_13/cond/FusedBatchNorm_1"
  input: "BatchNorm_13/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_13/cond/Merge_1"
  op: "Merge"
  input: "BatchNorm_13/cond/FusedBatchNorm_1:1"
  input: "BatchNorm_13/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_13/cond/Merge_2"
  op: "Merge"
  input: "BatchNorm_13/cond/FusedBatchNorm_1:2"
  input: "BatchNorm_13/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/Switch"
  op: "Switch"
  input: "Placeholder_1"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/switch_t"
  op: "Identity"
  input: "BatchNorm_13/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/switch_f"
  op: "Identity"
  input: "BatchNorm_13/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/pred_id"
  op: "Identity"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^BatchNorm_13/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "BatchNorm_13/moving_mean/read"
  input: "BatchNorm_13/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "BatchNorm_13/cond/Merge_1"
  input: "BatchNorm_13/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/cond/Merge_1"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "BatchNorm_13/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "BatchNorm_13/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "BatchNorm_13/cond_1/AssignMovingAvg/sub"
  input: "BatchNorm_13/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "BatchNorm_13/moving_mean"
  input: "BatchNorm_13/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "BatchNorm_13/cond_1/AssignMovingAvg/Switch:1"
  input: "BatchNorm_13/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^BatchNorm_13/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "BatchNorm_13/moving_variance/read"
  input: "BatchNorm_13/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "BatchNorm_13/cond/Merge_2"
  input: "BatchNorm_13/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/cond/Merge_2"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "BatchNorm_13/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "BatchNorm_13/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "BatchNorm_13/cond_1/AssignMovingAvg_1/sub"
  input: "BatchNorm_13/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "BatchNorm_13/moving_variance"
  input: "BatchNorm_13/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "BatchNorm_13/cond_1/AssignMovingAvg_1/Switch:1"
  input: "BatchNorm_13/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/Switch_1"
  op: "Switch"
  input: "BatchNorm_13/moving_mean/read"
  input: "BatchNorm_13/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/Switch_2"
  op: "Switch"
  input: "BatchNorm_13/moving_variance/read"
  input: "BatchNorm_13/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/Merge"
  op: "Merge"
  input: "BatchNorm_13/cond_1/Switch_1"
  input: "BatchNorm_13/cond_1/AssignMovingAvg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_13/cond_1/Merge_1"
  op: "Merge"
  input: "BatchNorm_13/cond_1/Switch_2"
  input: "BatchNorm_13/cond_1/AssignMovingAvg_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BatchNorm_13/Shape"
  op: "Shape"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "BatchNorm_13/Reshape_1"
  op: "Reshape"
  input: "BatchNorm_13/cond/Merge"
  input: "BatchNorm_13/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_9/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "Dropout_9/dropout/Shape"
  op: "Shape"
  input: "BatchNorm_13/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Dropout_9/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Dropout_9/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Dropout_9/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Dropout_9/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Dropout_9/dropout/random_uniform/sub"
  op: "Sub"
  input: "Dropout_9/dropout/random_uniform/max"
  input: "Dropout_9/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_9/dropout/random_uniform/mul"
  op: "Mul"
  input: "Dropout_9/dropout/random_uniform/RandomUniform"
  input: "Dropout_9/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_9/dropout/random_uniform"
  op: "Add"
  input: "Dropout_9/dropout/random_uniform/mul"
  input: "Dropout_9/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_9/dropout/add"
  op: "Add"
  input: "Dropout_9/dropout/keep_prob"
  input: "Dropout_9/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_9/dropout/Floor"
  op: "Floor"
  input: "Dropout_9/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_9/dropout/div"
  op: "RealDiv"
  input: "BatchNorm_13/Reshape_1"
  input: "Dropout_9/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Dropout_9/dropout/mul"
  op: "Mul"
  input: "Dropout_9/dropout/div"
  input: "Dropout_9/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "fully_connected_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "fully_connected_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "fully_connected_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "fully_connected_1/weights/Initializer/truncated_normal/mul"
  input: "fully_connected_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/weights/Assign"
  op: "Assign"
  input: "fully_connected_1/weights"
  input: "fully_connected_1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/weights/read"
  op: "Identity"
  input: "fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "fully_connected_1/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "fully_connected_1/kernel/Regularizer/l2_regularizer/scale"
  input: "fully_connected_1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "fully_connected_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected_1/biases/Assign"
  op: "Assign"
  input: "fully_connected_1/biases"
  input: "fully_connected_1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected_1/biases/read"
  op: "Identity"
  input: "fully_connected_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "fully_connected_1/MatMul"
  op: "MatMul"
  input: "Dropout_9/dropout/mul"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected_1/MatMul"
  input: "fully_connected_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fully_connected_1/Softmax"
  op: "Softmax"
  input: "fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "ExponentialDecay/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 11250
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1"
  op: "Cast"
  input: "ExponentialDecay/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast"
  input: "ExponentialDecay/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Floor"
  op: "Floor"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_2/x"
  input: "ExponentialDecay/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "y_"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "fully_connected_1/Softmax"
  input: "y_"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "sparse_softmax_cross_entropy_loss/Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Const_1"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Sum"
  op: "Sum"
  input: "sparse_softmax_cross_entropy_loss/Mul"
  input: "sparse_softmax_cross_entropy_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/Equal/y"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/Equal"
  op: "Equal"
  input: "sparse_softmax_cross_entropy_loss/Const"
  input: "sparse_softmax_cross_entropy_loss/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/zeros_like"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/ones_like/Shape"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/ones_like/Const"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/ones_like"
  op: "Fill"
  input: "sparse_softmax_cross_entropy_loss/num_present/ones_like/Shape"
  input: "sparse_softmax_cross_entropy_loss/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/Select"
  op: "Select"
  input: "sparse_softmax_cross_entropy_loss/num_present/Equal"
  input: "sparse_softmax_cross_entropy_loss/num_present/zeros_like"
  input: "sparse_softmax_cross_entropy_loss/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  input: "^sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  input: "^sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape"
  input: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights"
  op: "Mul"
  input: "sparse_softmax_cross_entropy_loss/num_present/Select"
  input: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present/Const"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/num_present"
  op: "Sum"
  input: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights"
  input: "sparse_softmax_cross_entropy_loss/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Const_2"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Sum_1"
  op: "Sum"
  input: "sparse_softmax_cross_entropy_loss/Sum"
  input: "sparse_softmax_cross_entropy_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Greater/y"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Greater"
  op: "Greater"
  input: "sparse_softmax_cross_entropy_loss/num_present"
  input: "sparse_softmax_cross_entropy_loss/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Equal/y"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Equal"
  op: "Equal"
  input: "sparse_softmax_cross_entropy_loss/num_present"
  input: "sparse_softmax_cross_entropy_loss/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/ones_like/Shape"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/ones_like/Const"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/ones_like"
  op: "Fill"
  input: "sparse_softmax_cross_entropy_loss/ones_like/Shape"
  input: "sparse_softmax_cross_entropy_loss/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/Select"
  op: "Select"
  input: "sparse_softmax_cross_entropy_loss/Equal"
  input: "sparse_softmax_cross_entropy_loss/ones_like"
  input: "sparse_softmax_cross_entropy_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/div"
  op: "RealDiv"
  input: "sparse_softmax_cross_entropy_loss/Sum_1"
  input: "sparse_softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/zeros_like"
  op: "Const"
  input: "^sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "sparse_softmax_cross_entropy_loss/value"
  op: "Select"
  input: "sparse_softmax_cross_entropy_loss/Greater"
  input: "sparse_softmax_cross_entropy_loss/div"
  input: "sparse_softmax_cross_entropy_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "fully_connected_1/Softmax"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "Cast"
  input: "y_"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Cast_1"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/value_grad/zeros_like"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/value_grad/Select"
  op: "Select"
  input: "sparse_softmax_cross_entropy_loss/Greater"
  input: "gradients/Fill"
  input: "gradients/sparse_softmax_cross_entropy_loss/value_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/value_grad/Select_1"
  op: "Select"
  input: "sparse_softmax_cross_entropy_loss/Greater"
  input: "gradients/sparse_softmax_cross_entropy_loss/value_grad/zeros_like"
  input: "gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/value_grad/Select"
  input: "^gradients/sparse_softmax_cross_entropy_loss/value_grad/Select_1"
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/value_grad/Select"
  input: "^gradients/sparse_softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/value_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/value_grad/Select_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/value_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Shape"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Shape_1"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Shape"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/sparse_softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  input: "sparse_softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Sum"
  op: "Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/RealDiv"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Neg"
  op: "Neg"
  input: "sparse_softmax_cross_entropy_loss/Sum_1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Neg"
  input: "sparse_softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/RealDiv_1"
  input: "sparse_softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/mul"
  op: "Mul"
  input: "gradients/sparse_softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/mul"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Sum_1"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/div_grad/Reshape"
  input: "^gradients/sparse_softmax_cross_entropy_loss/div_grad/Reshape_1"
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Reshape"
  input: "^gradients/sparse_softmax_cross_entropy_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/Reshape_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/tuple/control_dependency"
  input: "gradients/sparse_softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Sum_1_grad/Tile/multiples"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/sparse_softmax_cross_entropy_loss/Sum_1_grad/Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/Sum_1_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/zeros_like"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/Select"
  op: "Select"
  input: "sparse_softmax_cross_entropy_loss/Equal"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/tuple/control_dependency_1"
  input: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/Select_1"
  op: "Select"
  input: "sparse_softmax_cross_entropy_loss/Equal"
  input: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/zeros_like"
  input: "gradients/sparse_softmax_cross_entropy_loss/div_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/Select_grad/Select"
  input: "^gradients/sparse_softmax_cross_entropy_loss/Select_grad/Select_1"
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/Select"
  input: "^gradients/sparse_softmax_cross_entropy_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/Select_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/Select_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/Select_grad/Select_1"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Sum_grad/Reshape/shape"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/Sum_1_grad/Tile"
  input: "gradients/sparse_softmax_cross_entropy_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Sum_grad/Shape"
  op: "Shape"
  input: "sparse_softmax_cross_entropy_loss/Mul"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/sparse_softmax_cross_entropy_loss/Sum_grad/Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/mul"
  op: "Mul"
  input: "gradients/sparse_softmax_cross_entropy_loss/Sum_grad/Tile"
  input: "sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/mul"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/mul_1"
  op: "Mul"
  input: "sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "gradients/sparse_softmax_cross_entropy_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/mul_1"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^gradients/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present_grad/Reshape/shape"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present_grad/Reshape"
  op: "Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/Select_grad/tuple/control_dependency_1"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present_grad/Shape"
  op: "Shape"
  input: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present_grad/Tile"
  op: "Tile"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present_grad/Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Shape"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Shape_1"
  op: "Shape"
  input: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Shape"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/mul"
  op: "Mul"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present_grad/Tile"
  input: "sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Sum"
  op: "Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/mul"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Reshape"
  op: "Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/mul_1"
  op: "Mul"
  input: "sparse_softmax_cross_entropy_loss/num_present/Select"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Sum_1"
  op: "Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/mul_1"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Sum_1"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Reshape"
  input: "^gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Reshape_1"
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Reshape"
  input: "^gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Reshape_1"
  input: "^gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like_grad/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like_grad/Sum"
  op: "Sum"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  input: "gradients/sparse_softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  op: "PreventGradient"
  input: "sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/sparse_softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  input: "gradients/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "gradients/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "gradients/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected_1/Softmax_grad/mul"
  op: "Mul"
  input: "gradients/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "fully_connected_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected_1/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients/fully_connected_1/Softmax_grad/mul"
  input: "gradients/fully_connected_1/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/Softmax_grad/Reshape/shape"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/Softmax_grad/Reshape"
  op: "Reshape"
  input: "gradients/fully_connected_1/Softmax_grad/Sum"
  input: "gradients/fully_connected_1/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/fully_connected_1/Softmax_grad/sub"
  op: "Sub"
  input: "gradients/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "gradients/fully_connected_1/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected_1/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients/fully_connected_1/Softmax_grad/sub"
  input: "fully_connected_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected_1/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/fully_connected_1/Softmax_grad/mul_1"
  input: "^gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/Softmax_grad/mul_1"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/Softmax_grad/mul_1"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Dropout_9/dropout/mul"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/Shape"
  op: "Shape"
  input: "Dropout_9/dropout/div"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "Dropout_9/dropout/Floor"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Dropout_9/dropout/mul_grad/Shape"
  input: "gradients/Dropout_9/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/mul"
  op: "Mul"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "Dropout_9/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/Dropout_9/dropout/mul_grad/mul"
  input: "gradients/Dropout_9/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/Dropout_9/dropout/mul_grad/Sum"
  input: "gradients/Dropout_9/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "Dropout_9/dropout/div"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/Dropout_9/dropout/mul_grad/mul_1"
  input: "gradients/Dropout_9/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Dropout_9/dropout/mul_grad/Sum_1"
  input: "gradients/Dropout_9/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Dropout_9/dropout/mul_grad/Reshape"
  input: "^gradients/Dropout_9/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Dropout_9/dropout/mul_grad/Reshape"
  input: "^gradients/Dropout_9/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_9/dropout/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Dropout_9/dropout/mul_grad/Reshape_1"
  input: "^gradients/Dropout_9/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_9/dropout/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/Shape"
  op: "Shape"
  input: "BatchNorm_13/Reshape_1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Dropout_9/dropout/div_grad/Shape"
  input: "gradients/Dropout_9/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/Dropout_9/dropout/mul_grad/tuple/control_dependency"
  input: "Dropout_9/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/Sum"
  op: "Sum"
  input: "gradients/Dropout_9/dropout/div_grad/RealDiv"
  input: "gradients/Dropout_9/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/Dropout_9/dropout/div_grad/Sum"
  input: "gradients/Dropout_9/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/Neg"
  op: "Neg"
  input: "BatchNorm_13/Reshape_1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/Dropout_9/dropout/div_grad/Neg"
  input: "Dropout_9/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/Dropout_9/dropout/div_grad/RealDiv_1"
  input: "Dropout_9/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/mul"
  op: "Mul"
  input: "gradients/Dropout_9/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/Dropout_9/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/Dropout_9/dropout/div_grad/mul"
  input: "gradients/Dropout_9/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Dropout_9/dropout/div_grad/Sum_1"
  input: "gradients/Dropout_9/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Dropout_9/dropout/div_grad/Reshape"
  input: "^gradients/Dropout_9/dropout/div_grad/Reshape_1"
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Dropout_9/dropout/div_grad/Reshape"
  input: "^gradients/Dropout_9/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_9/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Dropout_9/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Dropout_9/dropout/div_grad/Reshape_1"
  input: "^gradients/Dropout_9/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_9/dropout/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/Reshape_1_grad/Shape"
  op: "Shape"
  input: "BatchNorm_13/cond/Merge"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/BatchNorm_13/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/Dropout_9/dropout/div_grad/tuple/control_dependency"
  input: "gradients/BatchNorm_13/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/BatchNorm_13/Reshape_1_grad/Reshape"
  input: "BatchNorm_13/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/Reshape_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_13/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/BatchNorm_13/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/Merge_grad/cond_grad"
  input: "^gradients/BatchNorm_13/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/Reshape_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/Merge_grad/cond_grad:1"
  input: "^gradients/BatchNorm_13/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/Reshape_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "BatchNorm_13/cond/FusedBatchNorm_1:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "BatchNorm_13/cond/FusedBatchNorm_1:2"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "BatchNorm_13/cond/FusedBatchNorm_1:3"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "BatchNorm_13/cond/FusedBatchNorm_1:4"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/BatchNorm_13/cond/Merge_grad/tuple/control_dependency"
  input: "BatchNorm_13/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_13/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_5"
  op: "ZerosLike"
  input: "BatchNorm_13/cond/FusedBatchNorm:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_6"
  op: "ZerosLike"
  input: "BatchNorm_13/cond/FusedBatchNorm:2"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_7"
  op: "ZerosLike"
  input: "BatchNorm_13/cond/FusedBatchNorm:3"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_8"
  op: "ZerosLike"
  input: "BatchNorm_13/cond/FusedBatchNorm:4"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/BatchNorm_13/cond/Merge_grad/tuple/control_dependency_1"
  input: "BatchNorm_13/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_13/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_13/cond/FusedBatchNorm:3"
  input: "BatchNorm_13/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "BatchNorm_13/Reshape"
  input: "BatchNorm_13/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_1"
  op: "Shape"
  input: "gradients/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Fill"
  input: "gradients/Shape_1"
  input: "gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "BatchNorm_13/gamma/read"
  input: "BatchNorm_13/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_2"
  op: "Shape"
  input: "gradients/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_1/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Fill"
  input: "gradients/Shape_2"
  input: "gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  input: "gradients/zeros_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "BatchNorm_13/beta/read"
  input: "BatchNorm_13/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_3"
  op: "Shape"
  input: "gradients/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_2/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Fill"
  input: "gradients/Shape_3"
  input: "gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "BatchNorm_13/Reshape"
  input: "BatchNorm_13/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_4"
  op: "Shape"
  input: "gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_3/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Fill"
  input: "gradients/Shape_4"
  input: "gradients/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "BatchNorm_13/gamma/read"
  input: "BatchNorm_13/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_5"
  op: "Shape"
  input: "gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_4/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Fill"
  input: "gradients/Shape_5"
  input: "gradients/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "gradients/zeros_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "BatchNorm_13/beta/read"
  input: "BatchNorm_13/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_6"
  op: "Shape"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_5/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Fill"
  input: "gradients/Shape_6"
  input: "gradients/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_13/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_13/Reshape_grad/Shape"
  op: "Shape"
  input: "fully_connected/Relu"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/BatchNorm_13/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN"
  input: "gradients/BatchNorm_13/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/BatchNorm_13/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_13/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/BatchNorm_13/Reshape_grad/Reshape"
  input: "fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Flatten/flatten/Reshape"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/Flatten/flatten/Reshape_grad/Shape"
  op: "Shape"
  input: "Dropout_8/dropout/mul"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Flatten/flatten/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency"
  input: "gradients/Flatten/flatten/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/Shape"
  op: "Shape"
  input: "Dropout_8/dropout/div"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "Dropout_8/dropout/Floor"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Dropout_8/dropout/mul_grad/Shape"
  input: "gradients/Dropout_8/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/mul"
  op: "Mul"
  input: "gradients/Flatten/flatten/Reshape_grad/Reshape"
  input: "Dropout_8/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/Dropout_8/dropout/mul_grad/mul"
  input: "gradients/Dropout_8/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/Dropout_8/dropout/mul_grad/Sum"
  input: "gradients/Dropout_8/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "Dropout_8/dropout/div"
  input: "gradients/Flatten/flatten/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/Dropout_8/dropout/mul_grad/mul_1"
  input: "gradients/Dropout_8/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Dropout_8/dropout/mul_grad/Sum_1"
  input: "gradients/Dropout_8/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Dropout_8/dropout/mul_grad/Reshape"
  input: "^gradients/Dropout_8/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Dropout_8/dropout/mul_grad/Reshape"
  input: "^gradients/Dropout_8/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_8/dropout/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Dropout_8/dropout/mul_grad/Reshape_1"
  input: "^gradients/Dropout_8/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_8/dropout/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/Shape"
  op: "Shape"
  input: "MaxPool2D_4/MaxPool"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Dropout_8/dropout/div_grad/Shape"
  input: "gradients/Dropout_8/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/Dropout_8/dropout/mul_grad/tuple/control_dependency"
  input: "Dropout_8/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/Sum"
  op: "Sum"
  input: "gradients/Dropout_8/dropout/div_grad/RealDiv"
  input: "gradients/Dropout_8/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/Dropout_8/dropout/div_grad/Sum"
  input: "gradients/Dropout_8/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/Neg"
  op: "Neg"
  input: "MaxPool2D_4/MaxPool"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/Dropout_8/dropout/div_grad/Neg"
  input: "Dropout_8/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/Dropout_8/dropout/div_grad/RealDiv_1"
  input: "Dropout_8/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/mul"
  op: "Mul"
  input: "gradients/Dropout_8/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/Dropout_8/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/Dropout_8/dropout/div_grad/mul"
  input: "gradients/Dropout_8/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Dropout_8/dropout/div_grad/Sum_1"
  input: "gradients/Dropout_8/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Dropout_8/dropout/div_grad/Reshape"
  input: "^gradients/Dropout_8/dropout/div_grad/Reshape_1"
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Dropout_8/dropout/div_grad/Reshape"
  input: "^gradients/Dropout_8/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_8/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Dropout_8/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Dropout_8/dropout/div_grad/Reshape_1"
  input: "^gradients/Dropout_8/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_8/dropout/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/MaxPool2D_4/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "BatchNorm_12/cond/Merge"
  input: "MaxPool2D_4/MaxPool"
  input: "gradients/Dropout_8/dropout/div_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/MaxPool2D_4/MaxPool_grad/MaxPoolGrad"
  input: "BatchNorm_12/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MaxPool2D_4/MaxPool_grad/MaxPoolGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_12/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/BatchNorm_12/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/Merge_grad/cond_grad"
  input: "^gradients/BatchNorm_12/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MaxPool2D_4/MaxPool_grad/MaxPoolGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/Merge_grad/cond_grad:1"
  input: "^gradients/BatchNorm_12/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MaxPool2D_4/MaxPool_grad/MaxPoolGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_9"
  op: "ZerosLike"
  input: "BatchNorm_12/cond/FusedBatchNorm_1:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_10"
  op: "ZerosLike"
  input: "BatchNorm_12/cond/FusedBatchNorm_1:2"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_11"
  op: "ZerosLike"
  input: "BatchNorm_12/cond/FusedBatchNorm_1:3"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_12"
  op: "ZerosLike"
  input: "BatchNorm_12/cond/FusedBatchNorm_1:4"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/BatchNorm_12/cond/Merge_grad/tuple/control_dependency"
  input: "BatchNorm_12/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_12/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_13"
  op: "ZerosLike"
  input: "BatchNorm_12/cond/FusedBatchNorm:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_14"
  op: "ZerosLike"
  input: "BatchNorm_12/cond/FusedBatchNorm:2"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_15"
  op: "ZerosLike"
  input: "BatchNorm_12/cond/FusedBatchNorm:3"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_16"
  op: "ZerosLike"
  input: "BatchNorm_12/cond/FusedBatchNorm:4"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/BatchNorm_12/cond/Merge_grad/tuple/control_dependency_1"
  input: "BatchNorm_12/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_12/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_12/cond/FusedBatchNorm:3"
  input: "BatchNorm_12/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "Conv_12/Relu"
  input: "BatchNorm_12/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_7"
  op: "Shape"
  input: "gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_6/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Fill"
  input: "gradients/Shape_7"
  input: "gradients/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "BatchNorm_12/gamma/read"
  input: "BatchNorm_12/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_8"
  op: "Shape"
  input: "gradients/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_7/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_7"
  op: "Fill"
  input: "gradients/Shape_8"
  input: "gradients/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  input: "gradients/zeros_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_8"
  op: "Switch"
  input: "BatchNorm_12/beta/read"
  input: "BatchNorm_12/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_9"
  op: "Shape"
  input: "gradients/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_8/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_8"
  op: "Fill"
  input: "gradients/Shape_9"
  input: "gradients/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_9"
  op: "Switch"
  input: "Conv_12/Relu"
  input: "BatchNorm_12/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_10"
  op: "Shape"
  input: "gradients/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_9/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_9"
  op: "Fill"
  input: "gradients/Shape_10"
  input: "gradients/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_10"
  op: "Switch"
  input: "BatchNorm_12/gamma/read"
  input: "BatchNorm_12/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_11"
  op: "Shape"
  input: "gradients/Switch_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_10/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_10"
  op: "Fill"
  input: "gradients/Shape_11"
  input: "gradients/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "gradients/zeros_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_11"
  op: "Switch"
  input: "BatchNorm_12/beta/read"
  input: "BatchNorm_12/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_12"
  op: "Shape"
  input: "gradients/Switch_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_11/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_11"
  op: "Fill"
  input: "gradients/Shape_12"
  input: "gradients/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_12/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Conv_12/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_3"
  input: "Conv_12/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/BatchNorm_12/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_12/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Conv_12/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/Conv_12/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/Conv_12/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Conv_12/Relu_grad/ReluGrad"
  input: "^gradients/Conv_12/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/Conv_12/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Conv_12/Relu_grad/ReluGrad"
  input: "^gradients/Conv_12/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_12/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/Conv_12/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Conv_12/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/Conv_12/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_12/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/Conv_12/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Dropout_7/dropout/mul"
  input: "Conv_12/weights/read"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Conv_12/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Conv_12/Conv2D_grad/ShapeN"
  input: "Conv_12/weights/read"
  input: "gradients/Conv_12/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Conv_12/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Dropout_7/dropout/mul"
  input: "gradients/Conv_12/Conv2D_grad/ShapeN:1"
  input: "gradients/Conv_12/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Conv_12/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Conv_12/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Conv_12/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/Conv_12/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Conv_12/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Conv_12/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_12/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Conv_12/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Conv_12/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Conv_12/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_12/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/Shape"
  op: "Shape"
  input: "Dropout_7/dropout/div"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "Dropout_7/dropout/Floor"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Dropout_7/dropout/mul_grad/Shape"
  input: "gradients/Dropout_7/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/mul"
  op: "Mul"
  input: "gradients/Conv_12/Conv2D_grad/tuple/control_dependency"
  input: "Dropout_7/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/Dropout_7/dropout/mul_grad/mul"
  input: "gradients/Dropout_7/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/Dropout_7/dropout/mul_grad/Sum"
  input: "gradients/Dropout_7/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "Dropout_7/dropout/div"
  input: "gradients/Conv_12/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/Dropout_7/dropout/mul_grad/mul_1"
  input: "gradients/Dropout_7/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Dropout_7/dropout/mul_grad/Sum_1"
  input: "gradients/Dropout_7/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Dropout_7/dropout/mul_grad/Reshape"
  input: "^gradients/Dropout_7/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Dropout_7/dropout/mul_grad/Reshape"
  input: "^gradients/Dropout_7/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_7/dropout/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Dropout_7/dropout/mul_grad/Reshape_1"
  input: "^gradients/Dropout_7/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_7/dropout/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/Shape"
  op: "Shape"
  input: "BatchNorm_11/cond/Merge"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Dropout_7/dropout/div_grad/Shape"
  input: "gradients/Dropout_7/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/Dropout_7/dropout/mul_grad/tuple/control_dependency"
  input: "Dropout_7/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/Sum"
  op: "Sum"
  input: "gradients/Dropout_7/dropout/div_grad/RealDiv"
  input: "gradients/Dropout_7/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/Dropout_7/dropout/div_grad/Sum"
  input: "gradients/Dropout_7/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/Neg"
  op: "Neg"
  input: "BatchNorm_11/cond/Merge"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/Dropout_7/dropout/div_grad/Neg"
  input: "Dropout_7/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/Dropout_7/dropout/div_grad/RealDiv_1"
  input: "Dropout_7/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/mul"
  op: "Mul"
  input: "gradients/Dropout_7/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/Dropout_7/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/Dropout_7/dropout/div_grad/mul"
  input: "gradients/Dropout_7/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Dropout_7/dropout/div_grad/Sum_1"
  input: "gradients/Dropout_7/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Dropout_7/dropout/div_grad/Reshape"
  input: "^gradients/Dropout_7/dropout/div_grad/Reshape_1"
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Dropout_7/dropout/div_grad/Reshape"
  input: "^gradients/Dropout_7/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_7/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Dropout_7/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Dropout_7/dropout/div_grad/Reshape_1"
  input: "^gradients/Dropout_7/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_7/dropout/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Dropout_7/dropout/div_grad/tuple/control_dependency"
  input: "BatchNorm_11/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_7/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_11/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/BatchNorm_11/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/Merge_grad/cond_grad"
  input: "^gradients/BatchNorm_11/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_7/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/Merge_grad/cond_grad:1"
  input: "^gradients/BatchNorm_11/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_7/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_17"
  op: "ZerosLike"
  input: "BatchNorm_11/cond/FusedBatchNorm_1:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_18"
  op: "ZerosLike"
  input: "BatchNorm_11/cond/FusedBatchNorm_1:2"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_19"
  op: "ZerosLike"
  input: "BatchNorm_11/cond/FusedBatchNorm_1:3"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_20"
  op: "ZerosLike"
  input: "BatchNorm_11/cond/FusedBatchNorm_1:4"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/BatchNorm_11/cond/Merge_grad/tuple/control_dependency"
  input: "BatchNorm_11/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_11/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_21"
  op: "ZerosLike"
  input: "BatchNorm_11/cond/FusedBatchNorm:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_22"
  op: "ZerosLike"
  input: "BatchNorm_11/cond/FusedBatchNorm:2"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_23"
  op: "ZerosLike"
  input: "BatchNorm_11/cond/FusedBatchNorm:3"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_24"
  op: "ZerosLike"
  input: "BatchNorm_11/cond/FusedBatchNorm:4"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/BatchNorm_11/cond/Merge_grad/tuple/control_dependency_1"
  input: "BatchNorm_11/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_11/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_11/cond/FusedBatchNorm:3"
  input: "BatchNorm_11/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_12"
  op: "Switch"
  input: "Conv_11/Relu"
  input: "BatchNorm_11/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_13"
  op: "Shape"
  input: "gradients/Switch_12:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_12/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_12"
  op: "Fill"
  input: "gradients/Shape_13"
  input: "gradients/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_12"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_13"
  op: "Switch"
  input: "BatchNorm_11/gamma/read"
  input: "BatchNorm_11/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_14"
  op: "Shape"
  input: "gradients/Switch_13:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_13/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_13"
  op: "Fill"
  input: "gradients/Shape_14"
  input: "gradients/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  input: "gradients/zeros_13"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_14"
  op: "Switch"
  input: "BatchNorm_11/beta/read"
  input: "BatchNorm_11/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_15"
  op: "Shape"
  input: "gradients/Switch_14:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_14/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_14"
  op: "Fill"
  input: "gradients/Shape_15"
  input: "gradients/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_15"
  op: "Switch"
  input: "Conv_11/Relu"
  input: "BatchNorm_11/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_16"
  op: "Shape"
  input: "gradients/Switch_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_15/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_15"
  op: "Fill"
  input: "gradients/Shape_16"
  input: "gradients/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_15"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_16"
  op: "Switch"
  input: "BatchNorm_11/gamma/read"
  input: "BatchNorm_11/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_17"
  op: "Shape"
  input: "gradients/Switch_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_16/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_16"
  op: "Fill"
  input: "gradients/Shape_17"
  input: "gradients/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "gradients/zeros_16"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_17"
  op: "Switch"
  input: "BatchNorm_11/beta/read"
  input: "BatchNorm_11/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_18"
  op: "Shape"
  input: "gradients/Switch_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_17/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_17"
  op: "Fill"
  input: "gradients/Shape_18"
  input: "gradients/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_11/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_17"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Conv_11/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_6"
  input: "Conv_11/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/BatchNorm_11/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_11/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Conv_11/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/Conv_11/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/Conv_11/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Conv_11/Relu_grad/ReluGrad"
  input: "^gradients/Conv_11/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/Conv_11/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Conv_11/Relu_grad/ReluGrad"
  input: "^gradients/Conv_11/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_11/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/Conv_11/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Conv_11/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/Conv_11/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_11/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/Conv_11/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Dropout_6/dropout/mul"
  input: "Conv_11/weights/read"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Conv_11/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Conv_11/Conv2D_grad/ShapeN"
  input: "Conv_11/weights/read"
  input: "gradients/Conv_11/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Conv_11/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Dropout_6/dropout/mul"
  input: "gradients/Conv_11/Conv2D_grad/ShapeN:1"
  input: "gradients/Conv_11/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Conv_11/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Conv_11/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Conv_11/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/Conv_11/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Conv_11/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Conv_11/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_11/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Conv_11/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Conv_11/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Conv_11/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_11/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/Shape"
  op: "Shape"
  input: "Dropout_6/dropout/div"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "Dropout_6/dropout/Floor"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Dropout_6/dropout/mul_grad/Shape"
  input: "gradients/Dropout_6/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/mul"
  op: "Mul"
  input: "gradients/Conv_11/Conv2D_grad/tuple/control_dependency"
  input: "Dropout_6/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/Dropout_6/dropout/mul_grad/mul"
  input: "gradients/Dropout_6/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/Dropout_6/dropout/mul_grad/Sum"
  input: "gradients/Dropout_6/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "Dropout_6/dropout/div"
  input: "gradients/Conv_11/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/Dropout_6/dropout/mul_grad/mul_1"
  input: "gradients/Dropout_6/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Dropout_6/dropout/mul_grad/Sum_1"
  input: "gradients/Dropout_6/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Dropout_6/dropout/mul_grad/Reshape"
  input: "^gradients/Dropout_6/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Dropout_6/dropout/mul_grad/Reshape"
  input: "^gradients/Dropout_6/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_6/dropout/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Dropout_6/dropout/mul_grad/Reshape_1"
  input: "^gradients/Dropout_6/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_6/dropout/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/Shape"
  op: "Shape"
  input: "BatchNorm_10/cond/Merge"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Dropout_6/dropout/div_grad/Shape"
  input: "gradients/Dropout_6/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/Dropout_6/dropout/mul_grad/tuple/control_dependency"
  input: "Dropout_6/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/Sum"
  op: "Sum"
  input: "gradients/Dropout_6/dropout/div_grad/RealDiv"
  input: "gradients/Dropout_6/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/Dropout_6/dropout/div_grad/Sum"
  input: "gradients/Dropout_6/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/Neg"
  op: "Neg"
  input: "BatchNorm_10/cond/Merge"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/Dropout_6/dropout/div_grad/Neg"
  input: "Dropout_6/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/Dropout_6/dropout/div_grad/RealDiv_1"
  input: "Dropout_6/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/mul"
  op: "Mul"
  input: "gradients/Dropout_6/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/Dropout_6/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/Dropout_6/dropout/div_grad/mul"
  input: "gradients/Dropout_6/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Dropout_6/dropout/div_grad/Sum_1"
  input: "gradients/Dropout_6/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Dropout_6/dropout/div_grad/Reshape"
  input: "^gradients/Dropout_6/dropout/div_grad/Reshape_1"
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Dropout_6/dropout/div_grad/Reshape"
  input: "^gradients/Dropout_6/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_6/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Dropout_6/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Dropout_6/dropout/div_grad/Reshape_1"
  input: "^gradients/Dropout_6/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_6/dropout/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Dropout_6/dropout/div_grad/tuple/control_dependency"
  input: "BatchNorm_10/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_6/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_10/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/BatchNorm_10/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/Merge_grad/cond_grad"
  input: "^gradients/BatchNorm_10/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_6/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/Merge_grad/cond_grad:1"
  input: "^gradients/BatchNorm_10/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Dropout_6/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_25"
  op: "ZerosLike"
  input: "BatchNorm_10/cond/FusedBatchNorm_1:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_26"
  op: "ZerosLike"
  input: "BatchNorm_10/cond/FusedBatchNorm_1:2"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_27"
  op: "ZerosLike"
  input: "BatchNorm_10/cond/FusedBatchNorm_1:3"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_28"
  op: "ZerosLike"
  input: "BatchNorm_10/cond/FusedBatchNorm_1:4"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/BatchNorm_10/cond/Merge_grad/tuple/control_dependency"
  input: "BatchNorm_10/cond/FusedBatchNorm_1/Switch"
  input: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_1"
  input: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_3"
  input: "BatchNorm_10/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_29"
  op: "ZerosLike"
  input: "BatchNorm_10/cond/FusedBatchNorm:1"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_30"
  op: "ZerosLike"
  input: "BatchNorm_10/cond/FusedBatchNorm:2"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_31"
  op: "ZerosLike"
  input: "BatchNorm_10/cond/FusedBatchNorm:3"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_32"
  op: "ZerosLike"
  input: "BatchNorm_10/cond/FusedBatchNorm:4"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/BatchNorm_10/cond/Merge_grad/tuple/control_dependency_1"
  input: "BatchNorm_10/cond/FusedBatchNorm/Switch:1"
  input: "BatchNorm_10/cond/FusedBatchNorm/Switch_1:1"
  input: "BatchNorm_10/cond/FusedBatchNorm:3"
  input: "BatchNorm_10/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_18"
  op: "Switch"
  input: "Conv_10/Relu"
  input: "BatchNorm_10/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_19"
  op: "Shape"
  input: "gradients/Switch_18:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_18/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_18"
  op: "Fill"
  input: "gradients/Shape_19"
  input: "gradients/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_18"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_19"
  op: "Switch"
  input: "BatchNorm_10/gamma/read"
  input: "BatchNorm_10/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_20"
  op: "Shape"
  input: "gradients/Switch_19:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_19/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_19"
  op: "Fill"
  input: "gradients/Shape_20"
  input: "gradients/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  input: "gradients/zeros_19"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_20"
  op: "Switch"
  input: "BatchNorm_10/beta/read"
  input: "BatchNorm_10/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_21"
  op: "Shape"
  input: "gradients/Switch_20:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_20/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_20"
  op: "Fill"
  input: "gradients/Shape_21"
  input: "gradients/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_20"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_21"
  op: "Switch"
  input: "Conv_10/Relu"
  input: "BatchNorm_10/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_22"
  op: "Shape"
  input: "gradients/Switch_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_21/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_21"
  op: "Fill"
  input: "gradients/Shape_22"
  input: "gradients/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_21"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_22"
  op: "Switch"
  input: "BatchNorm_10/gamma/read"
  input: "BatchNorm_10/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_23"
  op: "Shape"
  input: "gradients/Switch_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_22/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_22"
  op: "Fill"
  input: "gradients/Shape_23"
  input: "gradients/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "gradients/zeros_22"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_23"
  op: "Switch"
  input: "BatchNorm_10/beta/read"
  input: "BatchNorm_10/cond/pred_id"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_24"
  op: "Shape"
  input: "gradients/Switch_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_23/Const"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_23"
  op: "Fill"
  input: "gradients/Shape_24"
  input: "gradients/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/BatchNorm_10/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_23"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Conv_10/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/AddN_9"
  input: "Conv_10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/BatchNorm_10/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/BatchNorm_10/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Conv_10/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/Conv_10/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/Conv_10/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Conv_10/Relu_grad/ReluGrad"
  input: "^gradients/Conv_10/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/Conv_10/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Conv_10/Relu_grad/ReluGrad"
  input: "^gradients/Conv_10/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_10/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/Conv_10/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Conv_10/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/Conv_10/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_10/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/Conv_10/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "x"
  input: "Conv_10/weights/read"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Conv_10/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Conv_10/Conv2D_grad/ShapeN"
  input: "Conv_10/weights/read"
  input: "gradients/Conv_10/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Conv_10/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "x"
  input: "gradients/Conv_10/Conv2D_grad/ShapeN:1"
  input: "gradients/Conv_10/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Conv_10/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^gradients/Conv_10/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Conv_10/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/Conv_10/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Conv_10/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Conv_10/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_10/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Conv_10/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Conv_10/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Conv_10/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Conv_10/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "GradientDescent/update_Conv_10/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Conv_10/weights"
  input: "ExponentialDecay"
  input: "gradients/Conv_10/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_Conv_10/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Conv_10/biases"
  input: "ExponentialDecay"
  input: "gradients/Conv_10/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_BatchNorm_10/gamma/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "BatchNorm_10/gamma"
  input: "ExponentialDecay"
  input: "gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_BatchNorm_10/beta/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "BatchNorm_10/beta"
  input: "ExponentialDecay"
  input: "gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_Conv_11/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Conv_11/weights"
  input: "ExponentialDecay"
  input: "gradients/Conv_11/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_Conv_11/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Conv_11/biases"
  input: "ExponentialDecay"
  input: "gradients/Conv_11/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_BatchNorm_11/gamma/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "BatchNorm_11/gamma"
  input: "ExponentialDecay"
  input: "gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_BatchNorm_11/beta/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "BatchNorm_11/beta"
  input: "ExponentialDecay"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_Conv_12/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Conv_12/weights"
  input: "ExponentialDecay"
  input: "gradients/Conv_12/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_Conv_12/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "Conv_12/biases"
  input: "ExponentialDecay"
  input: "gradients/Conv_12/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_BatchNorm_12/gamma/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "BatchNorm_12/gamma"
  input: "ExponentialDecay"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_BatchNorm_12/beta/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "BatchNorm_12/beta"
  input: "ExponentialDecay"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_fully_connected/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fully_connected/weights"
  input: "ExponentialDecay"
  input: "gradients/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_fully_connected/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fully_connected/biases"
  input: "ExponentialDecay"
  input: "gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_BatchNorm_13/beta/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "BatchNorm_13/beta"
  input: "ExponentialDecay"
  input: "gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_BatchNorm_13/gamma/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "BatchNorm_13/gamma"
  input: "ExponentialDecay"
  input: "gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_fully_connected_1/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fully_connected_1/weights"
  input: "ExponentialDecay"
  input: "gradients/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_fully_connected_1/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fully_connected_1/biases"
  input: "ExponentialDecay"
  input: "gradients/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update"
  op: "NoOp"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^GradientDescent/update_Conv_10/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_Conv_10/biases/ApplyGradientDescent"
  input: "^GradientDescent/update_BatchNorm_10/gamma/ApplyGradientDescent"
  input: "^GradientDescent/update_BatchNorm_10/beta/ApplyGradientDescent"
  input: "^GradientDescent/update_Conv_11/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_Conv_11/biases/ApplyGradientDescent"
  input: "^GradientDescent/update_BatchNorm_11/gamma/ApplyGradientDescent"
  input: "^GradientDescent/update_BatchNorm_11/beta/ApplyGradientDescent"
  input: "^GradientDescent/update_Conv_12/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_Conv_12/biases/ApplyGradientDescent"
  input: "^GradientDescent/update_BatchNorm_12/gamma/ApplyGradientDescent"
  input: "^GradientDescent/update_BatchNorm_12/beta/ApplyGradientDescent"
  input: "^GradientDescent/update_fully_connected/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_fully_connected/biases/ApplyGradientDescent"
  input: "^GradientDescent/update_BatchNorm_13/beta/ApplyGradientDescent"
  input: "^GradientDescent/update_BatchNorm_13/gamma/ApplyGradientDescent"
  input: "^GradientDescent/update_fully_connected_1/weights/ApplyGradientDescent"
  input: "^GradientDescent/update_fully_connected_1/biases/ApplyGradientDescent"
}
node {
  name: "GradientDescent/value"
  op: "Const"
  input: "^BatchNorm/AssignMovingAvg"
  input: "^BatchNorm/AssignMovingAvg_1"
  input: "^BatchNorm_1/AssignMovingAvg"
  input: "^BatchNorm_1/AssignMovingAvg_1"
  input: "^BatchNorm_2/AssignMovingAvg"
  input: "^BatchNorm_2/AssignMovingAvg_1"
  input: "^BatchNorm_3/AssignMovingAvg"
  input: "^BatchNorm_3/AssignMovingAvg_1"
  input: "^BatchNorm_4/AssignMovingAvg"
  input: "^BatchNorm_4/AssignMovingAvg_1"
  input: "^BatchNorm_5/AssignMovingAvg"
  input: "^BatchNorm_5/AssignMovingAvg_1"
  input: "^BatchNorm_6/AssignMovingAvg"
  input: "^BatchNorm_6/AssignMovingAvg_1"
  input: "^BatchNorm_7/AssignMovingAvg"
  input: "^BatchNorm_7/AssignMovingAvg_1"
  input: "^BatchNorm_8/AssignMovingAvg"
  input: "^BatchNorm_8/AssignMovingAvg_1"
  input: "^BatchNorm_9/AssignMovingAvg"
  input: "^BatchNorm_9/AssignMovingAvg_1"
  input: "^BatchNorm_10/AssignMovingAvg"
  input: "^BatchNorm_10/AssignMovingAvg_1"
  input: "^BatchNorm_11/AssignMovingAvg"
  input: "^BatchNorm_11/AssignMovingAvg_1"
  input: "^BatchNorm_12/AssignMovingAvg"
  input: "^BatchNorm_12/AssignMovingAvg_1"
  input: "^BatchNorm_13/cond_1/Merge"
  input: "^BatchNorm_13/cond_1/Merge_1"
  input: "^GradientDescent/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "GradientDescent"
  op: "AssignAdd"
  input: "global_step"
  input: "GradientDescent/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Conv/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "Conv/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "BatchNorm/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "Conv_1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "Conv_1/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "BatchNorm_1/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "BatchNorm_1/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "BatchNorm_1/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "BatchNorm_1/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Conv_2/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "Conv_2/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "BatchNorm_2/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "BatchNorm_2/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "BatchNorm_2/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "BatchNorm_2/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "Conv_3/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Conv_3/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "BatchNorm_3/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "BatchNorm_3/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "BatchNorm_3/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "BatchNorm_3/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "Conv_4/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "Conv_4/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "BatchNorm_4/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "BatchNorm_4/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "BatchNorm_4/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "BatchNorm_4/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "Conv_5/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "Conv_5/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "BatchNorm_5/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "BatchNorm_5/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "BatchNorm_5/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "BatchNorm_5/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "Conv_6/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "Conv_6/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "BatchNorm_6/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "BatchNorm_6/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "BatchNorm_6/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "BatchNorm_6/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "Conv_7/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "Conv_7/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "BatchNorm_7/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "BatchNorm_7/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "BatchNorm_7/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "BatchNorm_7/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "Conv_8/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "Conv_8/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_8/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "BatchNorm_8/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "BatchNorm_8/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "BatchNorm_8/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "BatchNorm_8/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "Conv_9/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "Conv_9/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_9/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "BatchNorm_9/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "BatchNorm_9/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "BatchNorm_9/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "BatchNorm_9/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "Conv_10/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "Conv_10/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_10/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "BatchNorm_10/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "BatchNorm_10/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "BatchNorm_10/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "BatchNorm_10/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "Conv_11/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "Conv_11/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_11/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "BatchNorm_11/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "BatchNorm_11/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "BatchNorm_11/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "BatchNorm_11/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "Conv_12/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "Conv_12/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Conv_12/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "BatchNorm_12/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "BatchNorm_12/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "BatchNorm_12/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "BatchNorm_12/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "fully_connected/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "fully_connected/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "BatchNorm_13/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "BatchNorm_13/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "BatchNorm_13/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "BatchNorm_13/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchNorm_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "fully_connected_1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "fully_connected_1/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Conv/weights/Assign"
  input: "^Conv/biases/Assign"
  input: "^BatchNorm/gamma/Assign"
  input: "^BatchNorm/beta/Assign"
  input: "^BatchNorm/moving_mean/Assign"
  input: "^BatchNorm/moving_variance/Assign"
  input: "^Conv_1/weights/Assign"
  input: "^Conv_1/biases/Assign"
  input: "^BatchNorm_1/gamma/Assign"
  input: "^BatchNorm_1/beta/Assign"
  input: "^BatchNorm_1/moving_mean/Assign"
  input: "^BatchNorm_1/moving_variance/Assign"
  input: "^Conv_2/weights/Assign"
  input: "^Conv_2/biases/Assign"
  input: "^BatchNorm_2/gamma/Assign"
  input: "^BatchNorm_2/beta/Assign"
  input: "^BatchNorm_2/moving_mean/Assign"
  input: "^BatchNorm_2/moving_variance/Assign"
  input: "^Conv_3/weights/Assign"
  input: "^Conv_3/biases/Assign"
  input: "^BatchNorm_3/gamma/Assign"
  input: "^BatchNorm_3/beta/Assign"
  input: "^BatchNorm_3/moving_mean/Assign"
  input: "^BatchNorm_3/moving_variance/Assign"
  input: "^Conv_4/weights/Assign"
  input: "^Conv_4/biases/Assign"
  input: "^BatchNorm_4/gamma/Assign"
  input: "^BatchNorm_4/beta/Assign"
  input: "^BatchNorm_4/moving_mean/Assign"
  input: "^BatchNorm_4/moving_variance/Assign"
  input: "^Conv_5/weights/Assign"
  input: "^Conv_5/biases/Assign"
  input: "^BatchNorm_5/gamma/Assign"
  input: "^BatchNorm_5/beta/Assign"
  input: "^BatchNorm_5/moving_mean/Assign"
  input: "^BatchNorm_5/moving_variance/Assign"
  input: "^Conv_6/weights/Assign"
  input: "^Conv_6/biases/Assign"
  input: "^BatchNorm_6/gamma/Assign"
  input: "^BatchNorm_6/beta/Assign"
  input: "^BatchNorm_6/moving_mean/Assign"
  input: "^BatchNorm_6/moving_variance/Assign"
  input: "^Conv_7/weights/Assign"
  input: "^Conv_7/biases/Assign"
  input: "^BatchNorm_7/gamma/Assign"
  input: "^BatchNorm_7/beta/Assign"
  input: "^BatchNorm_7/moving_mean/Assign"
  input: "^BatchNorm_7/moving_variance/Assign"
  input: "^Conv_8/weights/Assign"
  input: "^Conv_8/biases/Assign"
  input: "^BatchNorm_8/gamma/Assign"
  input: "^BatchNorm_8/beta/Assign"
  input: "^BatchNorm_8/moving_mean/Assign"
  input: "^BatchNorm_8/moving_variance/Assign"
  input: "^Conv_9/weights/Assign"
  input: "^Conv_9/biases/Assign"
  input: "^BatchNorm_9/gamma/Assign"
  input: "^BatchNorm_9/beta/Assign"
  input: "^BatchNorm_9/moving_mean/Assign"
  input: "^BatchNorm_9/moving_variance/Assign"
  input: "^Conv_10/weights/Assign"
  input: "^Conv_10/biases/Assign"
  input: "^BatchNorm_10/gamma/Assign"
  input: "^BatchNorm_10/beta/Assign"
  input: "^BatchNorm_10/moving_mean/Assign"
  input: "^BatchNorm_10/moving_variance/Assign"
  input: "^Conv_11/weights/Assign"
  input: "^Conv_11/biases/Assign"
  input: "^BatchNorm_11/gamma/Assign"
  input: "^BatchNorm_11/beta/Assign"
  input: "^BatchNorm_11/moving_mean/Assign"
  input: "^BatchNorm_11/moving_variance/Assign"
  input: "^Conv_12/weights/Assign"
  input: "^Conv_12/biases/Assign"
  input: "^BatchNorm_12/gamma/Assign"
  input: "^BatchNorm_12/beta/Assign"
  input: "^BatchNorm_12/moving_mean/Assign"
  input: "^BatchNorm_12/moving_variance/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/biases/Assign"
  input: "^BatchNorm_13/beta/Assign"
  input: "^BatchNorm_13/gamma/Assign"
  input: "^BatchNorm_13/moving_mean/Assign"
  input: "^BatchNorm_13/moving_variance/Assign"
  input: "^fully_connected_1/weights/Assign"
  input: "^fully_connected_1/biases/Assign"
  input: "^global_step/Assign"
}
versions {
  producer: 24
}
